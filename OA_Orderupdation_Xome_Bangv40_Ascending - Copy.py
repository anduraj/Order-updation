import requests
from bs4 import BeautifulSoup
import json
import time
from pytz import timezone
import datetime
import mysql.connector
from scrapy.http import HtmlResponse
import sender
from gooey.python_bindings.gooey_decorator import Gooey
from gooey.python_bindings.gooey_parser import GooeyParser
from random import randint
from gooey.python_bindings.gooey_decorator import Gooey
from gooey.python_bindings.gooey_parser import GooeyParser
import re
import ctypes
import logging
from datetime import datetime as DT
import os
from os import mkdir,makedirs
from datetime import datetime as DT
from datetime import date
from datetime import timedelta

urllib3_logger = logging.getLogger('urllib3')
urllib3_logger.setLevel(logging.CRITICAL)
LOG_FILENAME = 'backup/'+DT.now().strftime('XOME-OrderUp--%H_%M_%S_%d_%m_%Y.log')
logging.basicConfig(filename=LOG_FILENAME,level=logging.DEBUG)

ctypes.windll.kernel32.SetConsoleTitleW("Xome-OrderUP_Portal_Checking") 
SUCCESS_MESSAGE = """This is an automatic notification that one of your orders was auto-accepted using our service:

Client Name: {}
Accepted Time: {}
Due Date: {}
Provider Name: Xome
Order Fee: {}
Order Type: {}
OrderID: {}
Address: {}
"""

automails=["autogenerated@zoho.com","autogenerated1@zoho.com","autogenerated2@zoho.com","autogenerated3@zoho.com","autogenerated4@zoho.com","autogenerated5@zoho.com","autogenerated6@zoho.com","autogenerated7@zoho.com"]
photo = '375' #ecesis photographer
auto = '0' #is the order auto accepted '0'-Not auto accepted
orderid = '1'#dummy value
# all_order_types={"cHUD BPO Int":"1","cBPO Int (x) 48hr":"1","Ext FI":"13","Exterior-Only 2055":"2","cHUD BPO Ext":"2","PIR Pro Exterior":"2","Exterior PCR Only":"4","cBPO Ext (a) 48hr":"2","PIR Exterior":"13","BPO VPS Exterior":"2","Ext FI":"13","cBPO Ext (n) 48hr":"2","QBPO VPS Interior":"1","Field Inspection Int":"10","BPO VPS Interior":"1","MIT BPO Int SFR":"1","PDIFEMA5d":"13","BPO Ext - Dec Bwr":"2","BPO VPS Interior":"1","QBPO VPS Exterior":"2","BPO Ext - Chrg-off":"2","BPO VPS Exterior":"2","QBPO Exterior":"2","QBPO Interior":"1","QField Insp Ext":"13","QField Insp Int":"10",
#                  "BPO - Interior":"1","BPO - Exterior":"2","BPO - Interior (with HUD Addendum)":"1","CMA Exterior SFR":"2","CMA Exterior":"2","CMA Exterior Condo":"2",
#                  "MIT CMA Int SFR":"1","BPO Exterior":"2","CMA Interior":"1","CMA Interior - Condo":"1","CMA Interior - SFR":"1","Condition Report Interior":"10",
#                  "EWRA":"11","Exte":"2","EARB":"2","Inte":"1","IREO":"1","IARB":"1","Ext PCR Lending":"4","IWRA":"8","Exterior":"2","EREO":"2","Exterior BPO":"2","Interior BPO":"1",
#                  "Inspection Interior":"10","Interior Inspection":"10","Inspection Exterior":"13","Condition Report":"13","Exterior Inspection":"13","Bpo Exterior + Rental":"11","Bpo Interior":"1","Bpo Interior + Rental":"8" ,
#                  "Inspection Interior":"10", "Inspection Interior + Rental":"9", "Inspection Exterior + Rental":"12","Bpo Exterior":"2","Q Exterior CMA":"2",
#                  "BPOExtFCL":"2","BPOExtAuctionDD":"2","Ext PCR Lending":"4","Exterior PCR PER":"4","cBPO Ext (i)":"2","cBPO Ext (j)":"2","cBPO Ext (k)":"2",
#                  "cBPO Ext (m)":"2","cBPO Ext (n)":"2","cBPO Ext (p)":"2","cBPO Ext (q)":"2","cBPO Ext (r)":"2","cBPO Ext (t)":"2","cBPO Int (i)":"1",
#                  "cBPO Int (j)":"1","cBPO Int (k)":"1","cBPO Int (m)":"1","cBPO Int (n)":"1","cBPO Int (p)":"1","cBPO Int (q)":"1","cBPO Int (r)":"1","cBPO Int (t)":"1",
#                  "cBPO Ext (a)":"2","cBPO Int (a)":"1","cBPO Ext (b)":"2","cBPO Int (b)":"1","cBPO Ext (c)":"2","cBPO Int (c)":"1","cBPO Ext (d)":"2","cBPO Int (d)":"1",
#                  "cBPO Ext (e)":"2","cBPO Int (e)":"1","cBPO Ext (f)":"2","cBPO Int (f)":"1","cBPO Ext (g)":"2","cBPO Int (g)":"1","cBPO Ext (h)":"2","cBPO Int (h)":"1",
#                  "cBPO Ext (l)":"2","cBPO Int (l)":"1","cBPO Ext (o)":"2","cBPO Int (o)":"1","cBPO Ext (s)":"2","cBPO Int (s)":"1","cBPO Ext (u)":"2","cBPO Int (u)":"1",
#                  "cBPO Ext (v)":"2","cBPO Int (v)":"1","cBPO Ext (w)":"2","cBPO Int (w)":"1","cBPO Ext (x)":"2","cBPO Int (x)":"1","cBPO Ext (y)":"2","cBPO Int (y)":"1",
#                  "cBPO Ext (z)":"2","cBPO Int (z)":"1","Field Inspection Ext":"4","Property Inspection - Exterior":"4","PCR Ext (s)":"4","BPO Exterior SFR":"2","CMA Ext-5 Day":"2",
#                  "CMA Int-5 Day":"1","BPO Ext - Bkrpt":"2","BPO Ext-5 Day SFR":"2","cBPO Ext (x) 48hr":"2","cBPO Ext (x) 72hr":"2","Property Inspection - Interior":"10","Disaster Inspection":"13","cPCR Int no sketch":"10","HUD BPO Ext":"2","HUD BPO Int":"1"}

#all_order_types = {k.upper():v.upper() for k,v in all_order_types.items()} #convert order type keys to uppper case for proper comparison
removeHTML = re.compile('<.*?>')#remove HTML tags from address string
non_decimal = re.compile(r'[^\d.]+')#remove alphabets from price string

def maipping_mailsend(p,address,portal,client,ordertype,to,subject):
    try:
        ordertpe_message = 'We are unable to identify the {} for the following order\n\n Address: {} \n Portal: {} \n Client: {} \n Order Type {}'.format(p,address,portal,client,ordertype)
        mail = sender.Mail('smtp.gmail.com','notifications@bpoacceptor.com','$oft@ece2021', 465, use_ssl=True,fromaddr='notifications@bpoacceptor.com')
        mail.send_message(subject=subject, to=to ,body=ordertpe_message)
        #print('Mapping issue reported')
        logging.info('Mapping issue reported')
    except Exception as e:
        #(e)
        logging.error(e)


def tmfcheck(tmfuser,tmfpass):
    session = requests.session()
    tmfadd=[]
    url = "https://www.trackmyforeclosures.com/members/login/process/"
    data = {
            'username':tmfuser,
            'password':tmfpass,
            'submit':'Login'
            }
    response = session.post(url, data=data)
    if("Invalid Login or Password" not in response.text):
        #("Sucess Login to TMF")
        logging.info("Sucess Login to TMF")
        order=session.get("https://www.trackmyforeclosures.com/members/dashboard/getActive/?sEcho=1&iDisplayStart=0&iDisplayLength=-1")
        order=json.loads(order.text)
        for x in order["aaData"]:
            tmfadd.append(' '.join(x[3].split(",")[0].strip().split(" ")[:-2]))
        #(tmfadd)
        logging.info(tmfadd)
            
        return tmfadd
    else:
         logging.info('Login Failed')

def validate_dateTime(date_text): #function checks if due time is present in datetime string and appends 17:00:00 if no time is present #TFS default Time 5 PM
    try:
        datetime.datetime.strptime(date_text, "%m/%d/%Y %H:%M:%S")
        return date_text
    except ValueError:
        #("Incorrect date format, should be MM/DD/YYYY H:M:S")
        logging.info("Incorrect date format, should be MM/DD/YYYY H:M:S")
        #("Appending time to date")
        logging.info("Appending time to date")
        date_text = f'{date_text} 17:00:00'  
        return date_text
        

def updateATS(address,orderid,due,adrs,typ,portId,clientId,price,condition,bed,bath,LivingArea,LandArea,YearBuilt,prior,purchase_price,instruction,client,portal):
        ####################################################################################
        folderadd=address.replace(" <br />",",")
        #(folderadd)
        portaladdress = re.sub('\s+', ' ', folderadd).strip()
        #(portaladdress)
        logging.info("Org Address: {}".format(portaladdress))         
        headers = {
        'authority': 'www.zillow.com',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'accept-language': 'en-US,en;q=0.9',           
        'referer': 'https://www.zillow.com/?utm_medium=cpc&utm_source=google&utm_content=1471764169|65545421228|kwd-570802407|603457706088|&semQue=null&gclid=Cj0KCQiAvqGcBhCJARIsAFQ5ke7rTk7RocXIajKTxmwHqUem5wp2SK8MNa7zoXF8uTE0ppY1lLn4JW8aArpKEALw_wcB',
        'sec-ch-ua': '"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'upgrade-insecure-requests': '1',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
        }
        zilladdress=folderadd.replace(',','')
        zilladdress=zilladdress.replace(' ','-')
        #(zilladdress)
        logging.info('Zaddress1 : {}'.format(zilladdress))

        url='https://www.zillow.com/homes/{}_rb/'.format(zilladdress)
            
        response = requests.get(url,headers=headers)
        response =response.text
        response = HtmlResponse(url="my HTML string", body=response, encoding='utf-8')
        zadd=response.xpath('/html/head/title/text()').extract_first()
        #("portaladdress",portaladdress)
        logging.info('portaladdress : {}'.format(portaladdress))
        #(zadd)
        logging.info('Zillowaddress1 : {}'.format(zadd))
            

        if zadd == None or zadd=='Access to this page has been denied':
            zadd=portaladdress
                         
        zadd=zadd.split('| Zillow')[0]
        zadd=zadd.split('- Apartments for Rent')[0]
        zadd=zadd.split('| MLS')[0]

        #(zadd)
        zadd1=zadd.split(' ')[-1]
        subadd=zadd.split(' ')[:-1]
        subadd=" ".join(subadd)
        #("subadd:",subadd)
        if zadd1.__contains__("-"):
            zadd1=zadd1.split('-')[0]
            zadd= subadd+ " "+zadd1
            #(zadd)
        logging.info('Zillowaddress : {}'.format(zadd))
    ###########################################################################
      
        #("Order Type",typ)
        logging.info("Order Type - {}".format(typ))
        #("Due Date",due)
        logging.info("Due Date - {}".format(due))

        #convert duedate and time to IST ==> Provide duedate - <due> in MM/DD/YYYY H:M:S format
        try:
            due = validate_dateTime(due)
            ISTdue = datetime.datetime.strptime(due, "%m/%d/%Y %H:%M:%S") + datetime.timedelta(hours=9,minutes=30)#parse datetime string to datetime object and add required time to it
            ISTdue =datetime.datetime.strftime(ISTdue, "%m/%d/%Y %H:%M:%S")#format datetime object to string
            #('IST Due Date',ISTdue)
            logging.info('IST Due Date:{}'.format(ISTdue))
        except Exception as e:
            #(f'Failed to convert duedate ==> {due} to IST')       
            logging.info('Failed to convert duedate to IST')
        #=====================================================================================

            
        if not price: price="0"
        
        typ=typ.strip()
#----------fetching from db...........#
        # conn = mysql.connector.connect(host="34.70.96.52",database="order_updation",user="order",password="acceptance",buffered=True)
        # cursor = conn.cursor()
        # cursor.execute("""SELECT typeid, type FROM tfstypeid WHERE FIND_IN_SET('{}', type)""".format(typ))
        # #("""SELECT typeid, type FROM tfstypeid WHERE FIND_IN_SET('{}', type)""".format(typ))
        # if(cursor.rowcount>0):
        #     typId = cursor.fetchone()[0]
        #     #(typId)
        #     #("Order Type --{}-- Found".format(typ))
        # else:
        #     #("Order Type --{}--  Not Found".format(typ))
        #     logging.info("Order Type --{}--  Not Found".format(typ))
        #     #("Using Default Type -- 7")
        #     logging.info("Using Default Type -- 7")
        #     typId = None  
        # cursor.close()
        # conn.close()
        
        ordertype_json = 'S:\Portal Order Updation App script\order_type.json'
        with open(ordertype_json, 'r') as json_file:
            data_type = json.load(json_file)
            for entry in data_type:
                    filedtype_values = entry['filedtype']
                    type_value =entry['values']
                    terms = filedtype_values.split(',')
                    for value in terms : 
                        if value == typ:
                            #("ordertype match found from json")
                            logging.info("ordertype match found from json")
                            for values in type_value:    
                                typId=values.get('typeid') 
                                if typId is not None:
                                    #('typId:', typId)
                                    break
                                else:
                                    #("typid not found") 
                                    logging.info("typid not found") 
                            break                    
                        else:
                            #("Order Type --{}--  Not Found".format(typ))
                            logging.info("Order Type --{}--  Not Found".format(typ))
                            #("Using Default Type -- 7")
                            logging.info("Using Default Type -- 7")
                            typId = None  
                    if typId == None:
                        logging.info("Check next set")
                    else:
                        break
            
            #(typId)


        # if typ.upper() in all_order_types:
        #         typId = all_order_types[typ.upper()]
        # else:
        #         #("Order Type -- {} --  Not Found".format(typ))
        #         logging.info("Order Type -- {} --  Not Found".format(typ))
        #         #("Using Default Type -- 7")
        #         logging.info("Using Default Type -- 7")
        #         typId = None
                
        adrs = removeHTML.sub('', adrs)       
        adrs = re.sub('\s+', ' ', adrs).strip()
        address_copy = adrs   
        adrs = adrs.replace(",", " ").replace("  ", " ").replace(" ,", " ").replace("  ", " ").replace(" ,", " ").replace(", ", " ")
        adrs = re.sub('\s+', ' ', adrs).strip()
        
        trimsubj="" #trimsubj --> remove 4 digit extension to zipcode from address if present,this will be passed as subchk
        n = adrs.split(" ")
        r = n[-1].split("-")
        r[0] = str(r[0]).replace(",", "")
        n[-1] = r[0]
        for i in range(0,len(n)): trimsubj = trimsubj + ' '+ n[i]
        
        trimsubj = trimsubj.strip()

        zipcode = n[-1].split("-")
        zipcode = str(zipcode[0]).replace(",", "").strip()

        if len(zipcode) > 5 or len(zipcode)< 3 or not zipcode.isdigit(): zipcode=None
        else: zipcode = zipcode.zfill(5) #add leading zeroes to make zipcode 5 digit,incase of 3 or 4 digit zipcodes

        addressTrm = adrs.replace("~", "   ")
        subchk = trimsubj.replace("~", "   ")
        price = non_decimal.sub('', str(price)).strip()
        #("Order Price",price)
        logging.info('Order Price:{}'.format(price))

        ############  checking ELIZABETH NY OR NJ  #############
        #("CHECKING WHETHER ORDER ACCEPTED FOR MATTHEW-ELIZABETH NY OR MATTHEW-ELIZABETH NJ............")
        logging.info("CHECKING WHETHER ORDER ACCEPTED FOR MATTHEW-ELIZABETH NY OR MATTHEW-ELIZABETH NJ............")
        #(clientId)
        logging.info(clientId)
        try:
                if clientId=="10742" or clientId=="10743":
                        state=adrs.split()[-2]
                        #('STATE',state)
                        logging.info(state)
                        #("CHECKING STATE (NY or NJ)")
                        logging.info("CHECKING STATE (NY or NJ)")
                        if state=="NY":
                            clientId=10742
                        elif state=="NJ":
                            clientId=10743
                        else:
                            #("CHECK THE ORDER...........")
                            logging.info("CHECK THE ORDER...........")
                else:
                        logging.info("Client not identified as Elizabeth NY or NJ")
        except Exception as ex:
                logging.info(ex)
                                         ###################################################################################
        if clientId=='97' and (typId=='10' or typId=='12' or typId=='13' or typId=='14' or typId=='17' or typId=='18' or typId=='9' or typId=='4'):
         #('Inspection order of Vernon')
         logging.info('Inspection order of Vernon')
         
        elif typId and zipcode and portId and clientId:
                #('Updating Order Details to TFS..........')
                logging.info('Updating Order Details to TFS..........')
                
                session = requests.Session()
                rentalvalue=0
                inputData = "{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~".format(orderid,due,addressTrm,typId,portId,photo,clientId,price,zipcode,auto,subchk,address_copy,
                                                                             ISTdue,condition,rentalvalue)
                #(inputData)
                logging.info(inputData)
                instruction="{}".format(instruction)
                splinstruction="We are not able to update the instruction. Please check the portal."
                #(inputData)
                logging.info('inputData : {}'.format(inputData))

                payload={
                     "clientId":clientId,
                     "procData":inputData,
                     "instructions":instruction,
                     "splInstructions":splinstruction
                    }
                #(payload)
                #url="http://13.200.17.36/ecesisapp/ats/Home/AddOrder"##testurl
                url="https://bpotrackers.com/ecesisapp/ats/Home/AddOrder"
                try:
                        response = session.post(url,data=payload)
                except:
                        session = requests.Session()
                        response = session.post(url,data=payload)
                #(response.text)
                resx=response.text
                logging.info(resx)
                if 'Success' not in resx:
                        #('Updation Failed..........')
                        logging.info('Updation Failed..........')
                else:
                        #('Successfully updated the order')
                        logging.info('Successfully updated the order')
                        ######################################################################
                        today=DT.now
                        year1=today().strftime('%Y')
                        month=today().strftime('%B')
                        currentdate=today().strftime('%m-%d-%Y')
                        #(currentdate)       
                        logging.info("Currentdate {}".format(currentdate))
                        def foldercreation():        
                            folder="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                            os.makedirs(folder)
                            #("folder created")
                            logging.info("folder created") 
                        if zadd.__contains__('#') or zadd.__contains__('Union') or zadd.__contains__('UNION') or zadd.__contains__('APT') or zadd.__contains__('apt'):
                            foldercreation()
                        else:
                            trial=zadd.replace(",","")
                            trial=trial.strip()
                            #("replaced trial:",trial)
                            trial=trial.split(" ")           
                            zip=trial[-1]   
                            trial=trial[:2]
                            x=" ".join(trial)
                            trial=x.lower()
                            #("folderzip:",zip)
                            logging.info(zip)
                            #("foldertrial:",trial)   
                            logging.info(trial)     
                            path="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient
                            #(os.listdir(path))
                            logging.info(os.listdir(path))
                            addfolders=os.listdir(path)
                            for i in addfolders:
                                oldaddress=i
                                i=i.replace(",","")
                                i=i.split(" ")
                                zippro=i[-1]   
                                typeofzip=zippro.isdigit()         
                                list=i[:2]
                                x=" ".join(list)
                                listadd=x.lower()
                                #("listadd=",listadd)
                                #("zippro:",zippro)
                                #("i=",i)
                                if trial==listadd and zip==zippro:
                                    old="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+oldaddress
                                    new="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                                    os.rename(old,new)
                                    #("Folder renamed")
                                    logging.info("Folder renamed")
                                    break
                                elif trial==listadd and typeofzip==False:
                                    old="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+oldaddress
                                    new="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                                    os.rename(old,new)
                                    #("Folder renamed")
                                    logging.info("Folder renamed")
                                    break  
                                else:
                                    #("match not found moving to next address")   
                                    logging.info("match not found moving to next address")                


                            #(addfolders.__contains__(zadd))
                            try:
                                if addfolders.__contains__(zadd)==False:
                                    foldercreation()
                                else:
                                    #("no need to create folder") 
                                    logging.info("no need to create folder")       
                            except Exception as e:
                                logging.info(e)
            #####################################################################
                tfslogin(addressTrm,clientId,due,bed,bath,LivingArea,LandArea,YearBuilt,prior,purchase_price)
        else:
                if not clientId:
                    #('Client Not Active or Unable to Map Client!!')
                    logging.info('Client Not Active or Unable to Map Client!!')
                    if client!="Sharyn" and client!="Sharyn Sharyn" and client!="Sharyn Jenny" and client!="Sharyn Matt" and client!="Matthew Daw" and client!="Sharyn-Sharyn" and client!="Sharyn-Jenny" and client!="Sharyn-Matt":
                        maipping_mailsend('clientname',address_copy,portal,client,typ,'teamsoftware@ecesistech.com','Mapping Failed.... Clientname!')

                if not zipcode:
                    #('Invalid Zipcode!!')
                    logging.info('Invalid Zipcode!!')
                if not typId:
                    #('Unable to map order Type -- {}'.format(typ))
                    logging.info('Unable to map order Type -- {}'.format(typ))
                    maipping_mailsend('ordertype',address_copy,portal,client,typ,'mapping@ecesistech.com','Mapping Failed.... Order Type!')
                if not portId:
                    #('Unable to map portId!!')
                    logging.info('Unable to map portId!!')
                
def tfslogin(addressTrm,clientId,due,bed,bath,LivingArea,LandArea,YearBuilt,prior,purchase_price):
    #("TFS Login...")
    #(addressTrm,clientId,due)
    Address1=addressTrm.split(" ")[0]
    Address2=addressTrm.split(" ")[1]
    Address=Address1+ ' ' +Address2
    due=datetime.datetime.strptime(due, "%m/%d/%Y %H:%M:%S")
    due='{}/{}/{}'.format(due.strftime("%m"), due.strftime("%d"), due.strftime("%y"))
    #(due)#12/20/2021 17:00:00
    payload = {
	"User": "ECESIS/ATS",
	"Password": "YXRzX3Rmc0Ax",
        "newuser":"",
        "newpwd":""
           }
    #login_url = "http://13.200.17.36/ecesisapptest/tfs"
    login_url = "https://bpotrackers.com/ecesisapp/tfs"
    session=requests.Session()  
    response= session.post(login_url, data=payload)
    # response=session.get("http://13.200.17.36/ecesisapptest/tfs/Home/applicationhome")
    response=session.get("https://bpotrackers.com/ecesisapp/tfs/Home/applicationhome")
    if 'My Profile' in response.text:
     #('Success login to TFS')
     #("========================")
     url='https://bpotrackers.com//bvupcqp/TFSRestAPI/StatusMarking?address={}&duedate={}&clientid={}'.format(Address,due,clientId)
    #  url='https://13.200.17.36//bvupcqp/TFSRestAPI/StatusMarking?address={}&duedate={}&clientid={}'.format(Address,due,clientId)
     #(url)
     search=session.get(url)
     search_response=search.text
     #(search_response)
     if json.loads(search_response)['Total'] >= "1":
         order_details = (json.loads(json.loads(search_response)['Data'])[0])
         #(order_details['order_id'])
         orderid = order_details['order_id']
         if orderid:
             url1='https://bpotrackers.com/bvupcqp/Home/ProcUpdateAutoBPOBED'
            #  url1="https://13.200.17.36/ecesisapp/ats/Home/ProcInsertOrderAuto"#test url
             inputData1="{}~{}~{}~{}~{}~{}~{}~".format(bed,bath,LivingArea,LandArea,YearBuilt,prior,purchase_price)
             data1={"strSessionID":"","ProcInputData":[inputData1,orderid,"417"],"ProcParameters":["sProcData", "sOrderID", "sEmpId"]}
             response = session.post(url1,params=data1)
             #(response.text)
             if 'Success' not in response.text:
                        #('Failed --- AutoBPO Fields Updation..........')
                        logging.info('Failed --- AutoBPO Fields Updation..........')
             else:
                        #('Success --- AutoBPO Fields Updation..........')
                        logging.info('Success --- AutoBPO Fields Updation..........')
     #("========================")
              
def client_map(username):
    try:
        cnx = mysql.connector.connect(host='34.70.96.52',database='order_acceptance',user='order',password='acceptance',autocommit=True)#set autocommit true to update DB content
        cursor = cnx.cursor(buffered=True, dictionary=True)
        #(f"""SELECT Client_name from `xome` where Username = '{username}'""")
        cursor.execute(f"""SELECT Client_name from `xome` where Username = '{username}'""")#Updated by aravind on 28/04/2023
        result = cursor.fetchone()
        cursor.close()
        cnx.close()
        return result
    except Exception as ex:
        #(f'Exception raised .. in client map function: {ex}')
        logging.info(f'Exception raised .. in client map function: {ex}')
        return None

def check_counter_accepted(address,orderid,username):
    try:
        table="mainstreetaccepted"
        database = "order_updation"
        result={}
        today = date.today()
        date_time = today.strftime('%Y-%m-%d')
        today_date=date_time+' 23:59:00'

        yesterday = today - timedelta(days=2)
        yesdate_time = yesterday.strftime('%Y-%m-%d')
        yesterday_date=yesdate_time+' 00:00:00'

        #(today_date)
        #(yesterday_date)
        client_data=client_map(username)
        if client_data:
            cnx = mysql.connector.connect(host='34.70.96.52',database='order_updation',user='order',password='acceptance',autocommit=True)#set autocommit true to update DB content
            cnx.database = database
            cursor = cnx.cursor(buffered=True, dictionary=True)
            #("SELECT * FROM `mainstreetaccepted` WHERE `ClientName` = '{}' and `Address` like '{}%' AND AcceptedTime BETWEEN '{}' AND '{}' AND MailStatus = 'Countered'".format(client_data['Client_name'],address,yesterday_date,today_date))
            cursor.execute("""SELECT * FROM {} WHERE MailStatus='Countered' and ProviderName='xome' and ClientName like '{}' and Address like '{}%' and `Order_id` = '{}' AND AcceptedTime BETWEEN '{}' AND '{}'""".format(table,client_data['Client_name'],address,orderid,yesterday_date,today_date))#Updated by aravind on 28/04/2023
            result = cursor.fetchone()
            if result:
                status='Countered Order Accepted'
                mail = sender.Mail('smtp.gmail.com',result['from_mail'], result['fromaddresspwd'], 465, use_ssl=True,
                                            fromaddr=result['from_mail'])
                #('Connected to email')
                logging.info('Connected to email')
                success_message = SUCCESS_MESSAGE.format(result['ClientName'],str(datetime.datetime.now()),result['DueDate'],result['OrderFee'],result['Order Type'],result['order_id'],result['Address'])
                mail.send_message(subject='Xome Countered order accepted!', to=('kaviya.v@ecesistech.com'), body=success_message, bcc='teamsoftware@ecesistech.com')

                localconn = mysql.connector.connect(host='34.70.96.52',database='order_updation',user='order',password='acceptance',autocommit=True,buffered=True)
                if localconn.is_connected():
                    #('Connected to MySQL database...')
                    logging.info('Connected to MySQL database...')
                    local_cursor = localconn.cursor()
                    local_cursor.execute("UPDATE `mainstreetaccepted` SET `MailStatus` = '{}' where `Order_id` = '{}' AND `ClientName` = '{}' and Address like '{}%'".format(status,result['order_id'],client_data['Client_name'],address))
                    #("UPDATE `mainstreetaccepted` SET `MailStatus` = '{}' where `Order_id` = '{}' AND `ClientName` = '{}' and Address like '{}%'".format(status,result['order_id'],client_data['Client_name'],address))
                    logging.info("UPDATE `mainstreetaccepted` SET `MailStatus` = '{}' where `Order_id` = '{}' AND `ClientName` = '{}' and Address like '{}%'".format(status,result['order_id'],client_data['Client_name'],address))
                    local_cursor.close()
                
                local_cursor.close()      
            else:
                logging.info('Not a Countered order')
        else:
            logging.info('Client Not in Acceptance')
        cursor.close()
        cnx.close()
    except Exception as ex:
        #(f'Exception raised .. in check_counter_accepted function: {ex}')
        logging.info(f'Exception raised .. in check_counter_accepted function: {ex}')

def check(session, Mainclient, Subclient,portal,cid,ats_client_id,ats_portal_id,tmfdata,ordercheckstatus):
        client=Mainclient+'-'+Subclient                               
        #(len(automails))
        headers={} #sending headers to fix unable to access page issue
        #('Check')
        new_orders_url = "https://vendor.voxturappraisal.com/Home/OrdersInProgressGrid"   
        headers={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'}             
        response = session.get(new_orders_url,headers=headers)
        ordersinprogress = json.loads(response.content)
        time.sleep(5)        
        #('Orders in progress: {}'.format(len(ordersinprogress)))
        logging.info('Orders in progress: {}'.format(len(ordersinprogress)))
        for o in ordersinprogress:
            
            try:
                col=o['BPOURL']
                #('col'+col)
                try:                       
                    url_2=col
                    #('url2'+url_2)
                    r3=session.get(url_2,headers=headers)
                    response_1=r3.text
                    soup = BeautifulSoup(response_1,'html.parser')
                    #(soup)
                    bath=soup.find("input", { "id" : "ctl00_ContentPlaceHolder1_txtBaths" }).get('value')
                    #('Bath',bath)
                    borrowerName=soup.find("input", { "id" : "ctl00_ContentPlaceHolder1_txtOwner" }).get('value')
                    #('borrower Name',borrowerName)
                    listdate=soup.find("input", { "id" : "ctl00_ContentPlaceHolder1_txtLDate" }).get('value')
                    #('listdate',listdate)
                    listprice=soup.find("input", { "id" : "ctl00_ContentPlaceHolder1_txtLPrice" }).get('value')
                    #('listprice',listprice)
                    solddate=soup.find("input", { "id" : "ctl00_ContentPlaceHolder1_txtSDate" }).get('value')
                    #('solddate',solddate)
                    soldprice=soup.find("input", { "id" : "ctl00_ContentPlaceHolder1_txtSPrice" }).get('value')
                    #('soldprice',soldprice)
                    
                    if bath is None:
                        bath=""
                    if borrowerName is None:
                        borrowerName=""
                    if listdate is None:
                        listdate=""
                    if listprice is None:
                        listprice=""
                    if solddate is None:
                        solddate=""
                    if soldprice is None:
                        soldprice=""
                    if 'collateralanalytics' in col:
                        bed=col.split('bedrooms=')[1]
                        bath=bath
                        LivingArea=col.split('livingarea=')[1].split('&landarea')[0] 
                        LandArea=col.split('landarea=')[1].split('&propertytype')[0]  
                        YearBuilt=col.split('yearbuilt=')[1].split('&bedrooms')[0]
                        propertytype=col.split('propertytype=')[1].split('&yearbuilt')[0]
                        propertytype=propertytype.replace('%20'," ")
                        borrowerName=borrowerName
                        listdate=listdate
                        listprice=listprice
                        solddate=solddate
                        soldprice=soldprice
                        propertytype=propertytype
    
                    else:
                        bed=''
                        bath=''
                        LivingArea=''
                        LandArea=''
                        YearBuilt=''
                        borrowerName=''
                        listdate=''
                        listprice=''
                        solddate=''
                        soldprice=''
                        propertytype=''
                except Exception as e:
                        #('The Exception is:',e)
                        bed=''
                        bath=''
                        LivingArea=''
                        LandArea=''
                        YearBuilt=''
                        borrowerName=''
                        listdate=''
                        listprice=''
                        solddate=''
                        soldprice=''
                        propertytype=''
                
                prior='0'
                purchase_price='0'
                ordid= o['OrderID']
                orderid=ordid
                orderitemid=o['OrderItemID']

                address= o['SubjectProperty']
                AssetType= o['ProductName']
                OrderItemNotation= o['OrderItemNotation']
                ProviderName= portal
                duedate= o['DueDate']
                new_fee_url = "https://vendor.voxturappraisal.com/SupportingActions/AddCommentModal/{}".format(OrderItemNotation.strip().replace('.','/'))
                response=session.get(new_fee_url)
                response = HtmlResponse(url="my HTML string", body=response.text, encoding='utf-8')
                Fee =response.xpath("//td[contains(text(),'Fee:')]//following::td//text()").extract_first()
                if Fee: Fee= Fee.strip()
    
                
                #(orderid,Subclient,Mainclient,AssetType,address,duedate,ProviderName,Fee)
                #('Bed :', bed, "\n" 'Bath :', bath, "\n" 'GLA :', LivingArea, "\n" 'Lot Size :', LandArea , "\n" 'YearBuilt :', YearBuilt)
                logging.info(orderid,Subclient,Mainclient,AssetType,address,duedate,ProviderName,Fee)
            
                pendingorders_url = "https://vendor.voxturappraisal.com/Orders/UpdatePendingOrder/%s/%s/" % (ordid,orderitemid)
                update_data={'Accept': '*/*',
                            'Accept-Encoding': 'gzip, deflate, br',
                            'Accept-Language': 'en-US,en;q=0.9',
                            'Connection': 'keep-alive',
                            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                            'Host': 'vendor.voxturappraisal.com/',
                            'Referer': 'https://vendor.voxturappraisal.com',
                            'Sec-Fetch-Dest': 'empty',
                            'Sec-Fetch-Mode': 'cors',
                            'Sec-Fetch-Site': 'same-origin',
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
                            'X-NewRelic-ID': 'VQ8EUVFSDRAFVlVUAwUDXlc=',
                            'X-Requested-With': 'XMLHttpRequest'}
                r3=session.get(pendingorders_url,data=update_data)
                response_1=r3.content
                soup = BeautifulSoup(response_1,'lxml')                      
                duedate=soup.find("input", { "id" : "VendorDueDateDisplay" }).get('value')
                duedate = datetime.datetime.strptime(duedate, '%m/%d/%Y at %I:%M %p').strftime("%m/%d/%Y %H:%M:%S")#convert datetime to required format
                #(duedate)      ########### due date from order details tab ############
                logging.info(duedate)
                condition="Average"
                tresp1 = HtmlResponse(url="my HTML string", body=(r3.text).replace('\\',"").replace("\r\n","").replace("Loading....","").replace("xa0",""), encoding='utf-8')
                res1=tresp1.text
                try:
                    
                    try:
                        instruction=tresp1.xpath("/html/body/div/div[3]/div[2]/div/div[6]/div/div[4]/div/div").extract()
                    except Exception as E:
                        #("Exception:",E)
                        instruction=tresp1.xpath("//*[contains(@id, 'InstructionsTab')]//following::div//div//text()").extract()
                    instruction=re.sub('<.*?>','',str(instruction))
                    instruction=str(instruction).replace("', '","").replace("×","").replace("  ","").replace("['","").replace("']","").replace("\\","")
                    if 'There are no instructions specific to this order' in instruction:
                        instruction='We are not able to update the instruction. Please check the portal.'
                    else:
                        instruction=instruction+"\n"+"\n"+"\n"+'Bed :'+bed+"\n"+'Bath :'+bath+"\n"+'GLA :'+LivingArea+"\n"+'Lot Size :'+LandArea+"\n"+'YearBuilt :'+YearBuilt+"\n"+'Owner Name :'+borrowerName+"\n"+'List Date :'+listdate+"\n"+'List Price :'+listprice+"\n"+'Sold Date :'+solddate+"\n"+'Sold Price :'+soldprice+"\n"+'Property Type :'+propertytype+"\n"
                    #('instruction',instruction)
                    logging.info('instruction: {}'.format(instruction))
                except Exception as E:
                    #("Expected Exception",E)
                    instruction="We are not able to update the instruction. Please check the portal."
                    #('instruction',instruction)
                    logging.info('instruction: {}'.format(instruction))
                if(ordercheckstatus !="TMF"):
                    #("Updated Address in DB...")
                    logging.info("Updated Address in DB...")
                    #("trail folder:",portal)
                    updateATS(address,orderid,duedate,address,AssetType,ats_portal_id,ats_client_id,Fee,condition,bed,bath,LivingArea,LandArea,YearBuilt,prior,purchase_price,instruction,client,portal)
                else:
                    if(tmfdata):
                        for each in tmfdata:
                            if(each in address):
                                #("Updated Address in DB...")
                                logging.info("Updated Address in DB...")
                                #("Address matched in TMF ...")
                                logging.info("Address matched in TMF ...")
                                updateATS(address,orderid,duedate,address,AssetType,ats_portal_id,ats_client_id,Fee,condition,bed,bath,LivingArea,LandArea,YearBuilt,prior,purchase_price,instruction,client,portal)
            except Exception as ex:
                #('exception here',ex)
                logging.error('exception here: {}'.format(ex))
        
        



#--------------------------Main Function-------------------------------------------------#
def Query_Database(host,database,user,password):
    conn = mysql.connector.connect(
            host=host,
            database=database,
            user=user,
            password=password,
            buffered=True)    ### fetching client details from db ###
    #('============================================================================================================================================')
    logging.info('============================================================================================================================================')
    if conn.is_connected():
            #('Connected to MySQL database...')
            logging.info('Connected to MySQL database...')
            cursor = conn.cursor()
            cursor.execute("SELECT count(*) FROM `allclients` WHERE (form LIKE 'Xome' ) AND ordercheckstatus != 'NO' AND (Mainclient='Bang') ORDER BY id ASC")
            result = cursor.fetchone()        
            cursor.execute("SELECT * FROM `allclients` WHERE (form LIKE 'Xome') AND Mainclient LIKE 'Bang' AND ordercheckstatus != 'NO' ORDER BY id ASC")
            # cursor.execute("SELECT * FROM `allclients` WHERE Subclient = 'Tom' AND (form LIKE 'Xome%') AND ordercheckstatus != 'NO' ORDER BY id ASC")
            db_data = cursor.fetchall()
            count_rem=result[0]
            for row in db_data:
                    #('Remaining no. of portals to be updated :- {}'.format(count_rem))
                    logging.info('Remaining no. of portals to be updated :- {}'.format(count_rem))
                    cid= row[0]
                    global mainclient
                    mainclient=row[1]
                    subclient=row[2]
                    portal=row[3]
                    username=row[4]
                    password=row[5]
                    credstatus=row[6]
                    ordercheckstatus=row[30]                    
                    ats_client_id = row[31] #fetch ATS Client and Portal ID's
                    ats_portal_id = row[32]
                    #(portal)
                    logging.info(portal)
                    #(credstatus)
                    logging.info(credstatus)
                    headers={}
                    if credstatus == 'Active':
                            if(ordercheckstatus=="TMF"):
                             try:
                                #("{}-{} ==> TMF Client => Getting TMF credentials".format(mainclient,subclient))
                                logging.info("{}-{} ==> TMF Client => Getting TMF credentials".format(mainclient,subclient))
                                cursor2 = conn.cursor()        
                                cursor2.execute("SELECT username,password FROM `allclients` WHERE form LIKE 'TMF' AND status='Active' AND ats_client_id="+ats_client_id)
                                tmfcred = cursor2.fetchone()
                                tmfuser=tmfcred[0]
                                tmfpass=tmfcred[1]
                                #(tmfcred)
                                logging.info(tmfcred)
                                try:
                                    tmfdata=tmfcheck(tmfuser,tmfpass)
                                except Exception as e:
                                    #('Error checking TMF ',e)
                                    logging.info('Error checking TMF:{}'.format(e))
                                    tmfdata=None
                             except Exception as e:
                                    logging.info('Error checking TMF ',e)    
                            else:tmfdata=None
                            
                            #('Checking {} - {} ->{} account'.format(mainclient,subclient,portal))
                            logging.info('Checking {} - {} ->{} account'.format(mainclient,subclient,portal))
                            ###################################################################################
                            try:
                                        session_check(username,password, mainclient, subclient,portal,cid,ats_client_id,ats_portal_id,tmfdata,ordercheckstatus)                                                                             
                            except Exception as ex:
                                            #('Exception rised ..', ex)
                                            logging.info('Exception rised ..')
                                            time.sleep(10)
                    else:
                        #('Bad Password')
                        logging.info('Bad Password')

                                
                    count_rem=int(count_rem)-1
                    row = cursor.fetchone()
                    cursor.close()
                    conn.close()
                    #('connection closed')
    else:
        #('Database connection failed')
        logging.info('Database connection failed')
    conn.close()
#---------------------------------------------------------------------------------------#

def login(username,password,ats_client_id):
    headers = {
        'authority': 'vendor.voxturappraisal.com',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'accept-language': 'en-US,en;q=0.9',
        'cache-control': 'max-age=0',
        'content-type': 'application/x-www-form-urlencoded',
        'origin': 'https://vendor.voxturappraisal.com',
        'referer': 'https://vendor.voxturappraisal.com/Account/Login',
        'sec-ch-ua': '"Chromium";v="118", "Google Chrome";v="118", "Not=A?Brand";v="99"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
    }

    data = {
        'Login.Username': username,
        'Login.Password': password,
    }
    session=requests.Session()
    response = session.post('https://vendor.voxturappraisal.com/Account/Login', headers=headers, data=data)
    if "The username or password are incorrect" in response.text or "Change Your Password" in response.text:
        #("Login Error")
        logging.info('Login Error')
        return response,session,False
    else:
        cookies=session.cookies.get_dict()
        time.sleep(1)

        # cookies = {
        #     'ASP.NET_SessionId': 'oqmmvwvjdkaxgzpfdflsvvci',
        #     'v_t_u': '9096ED823A6AD2D8F235208E8CE4FE73277ED72B656F11F03F79A1AC93C8CFF8DE64D422DEE599C3781A1C2A4E2B4E815F455FDFFA0FFF02C1DAE08AD3D530BDBF8E6D5570E92D34B92D7BEACD400E6C43C8CB1A85C8EA11650AE78D3EBDCADC1A20942844787F5859BD38FD19F4CE39A9DFEE934CFAD3F32FE73D0803ADE3FE6C7E832DA4AAC56CD8B839903126E9C5EFA35E16F550D93F9083E943E46CB8D16D2C5F4C',
        # }

        headers = {
            'authority': 'vendor.voxturappraisal.com',
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'accept-language': 'en-US,en;q=0.9',
            'cache-control': 'max-age=0',
            'content-type': 'application/x-www-form-urlencoded',
            # 'cookie': 'ASP.NET_SessionId=oqmmvwvjdkaxgzpfdflsvvci; v_t_u=9096ED823A6AD2D8F235208E8CE4FE73277ED72B656F11F03F79A1AC93C8CFF8DE64D422DEE599C3781A1C2A4E2B4E815F455FDFFA0FFF02C1DAE08AD3D530BDBF8E6D5570E92D34B92D7BEACD400E6C43C8CB1A85C8EA11650AE78D3EBDCADC1A20942844787F5859BD38FD19F4CE39A9DFEE934CFAD3F32FE73D0803ADE3FE6C7E832DA4AAC56CD8B839903126E9C5EFA35E16F550D93F9083E943E46CB8D16D2C5F4C',
            'origin': 'https://vendor.voxturappraisal.com',
            'referer': 'https://vendor.voxturappraisal.com/Account/Login',
            'sec-ch-ua': '"Chromium";v="118", "Google Chrome";v="118", "Not=A?Brand";v="99"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
            'sec-fetch-dest': 'document',
            'sec-fetch-mode': 'navigate',
            'sec-fetch-site': 'same-origin',
            'sec-fetch-user': '?1',
            'upgrade-insecure-requests': '1',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
        }
        def code_fetch(cookies):
            time.sleep(30)
            conn = mysql.connector.connect(host="34.70.96.52",database="order_updation",user="order",password="acceptance",buffered=True)
            cursor = conn.cursor()
            cursor.execute("""SELECT Code FROM `xomeverificationcode` WHERE  `clientid` = '{}'""".format(ats_client_id))
            codefetch=cursor.fetchone()[0]
            cursor.close()
            conn.close()
            if codefetch !=None:
                data = {
                    'Login.SecurityCode': f'{codefetch}',
                    'Login.IsPrimaryDevice': [
                        'true',
                        'false',
                    ],
                }
                response = session.post('https://vendor.voxturappraisal.com/Account/ValidateCode', cookies=cookies, headers=get_headers({}), data=data)
                cookies=session.cookies.get_dict()
                return response,session,True
            else:
                logging.info("Code Fetch From database Failed")
                response=''
                return response,session,False
        response,session,v_code_Flag=code_fetch(cookies)
        count=0
        if "The code is incorrect, please reenter the code" in response.text:
            #("Verification Code Error")
            if count==0:
                response = session.get('https://vendor.voxturappraisal.com/Account/ResendCode', cookies=cookies, headers=get_headers({}))
                time.sleep(3)
                response,session,v_code_Flag=code_fetch(cookies)
                count=count+1
            else:
                return session,False
        if v_code_Flag==False:
             return False,session
        else:

            headers = {
                'authority': 'vendor.voxturappraisal.com',
                'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'accept-language': 'en-US,en;q=0.9',
                'cache-control': 'max-age=0',
                # 'cookie': 'ASP.NET_SessionId=oqmmvwvjdkaxgzpfdflsvvci; .ASPXAUTH=5B443357AEE3925FEF085E2D231A97725A30B5A5A7F4E531704D2EDB03E41F270AD4EC90E364234DE046347CF9F7A7AE96B08DA9D285CA20A11AEBCE0466E9D53D1F77B1A0AAB4539D453B505CEBAE70F06B465AB61F90BDA5F91E7856DBB38419FEDB0FF648480AE672DC01C93FEADB07D180CB; v_pc_246989=9606BB26BDB7E1B755036B34AB47201D82D8227DC7BAFE161DF3AB1E080A8F502835DB3346DED0D579FAC55FF228A0D6458B0F6813BCD2C94BF00D31398AFAD5E0226010BC4137CBB4E51E819FDBF2B8A3E938B2A8A6109515B15F84AABF94D91B74CF7B6EAF775A83E617B886F2C23DF9AF0EDC',
                'referer': 'https://vendor.voxturappraisal.com/Account/Login',
                'sec-ch-ua': '"Chromium";v="118", "Google Chrome";v="118", "Not=A?Brand";v="99"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"',
                'sec-fetch-dest': 'document',
                'sec-fetch-mode': 'navigate',
                'sec-fetch-site': 'same-origin',
                'sec-fetch-user': '?1',
                'upgrade-insecure-requests': '1',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
            }

            response = session.get('https://vendor.voxturappraisal.com/', cookies=cookies, headers=headers)
            #(response.content)
            cookies=session.cookies.get_dict()
            cookies_string = json.dumps(cookies)
            conn = mysql.connector.connect(host="34.70.96.52",database="order_acceptance",user="order",password="acceptance",autocommit=True)
            cursor = conn.cursor()
            cursor.execute(f"UPDATE `xome` SET `Session_cookie` = '{cookies_string}' where `Username` = '{username}'")
            cursor.close()
            conn.close()
            # codefetch=cursorexec("order_acceptance","UPDATE",f"""UPDATE xome set Session_cookie='{cookies_string}' WHERE email_address='leanneaustinbpo@gmail.com'""")
            time.sleep(5)

            headers = get_headers({
                'accept': 'application/json, text/plain, */*',
                'referer': 'https://vendor.voxturappraisal.com/',
                'sec-fetch-dest': 'empty',
                'sec-fetch-mode': 'cors',
                'sec-fetch-site': 'same-origin',
                'x-requested-with': 'XMLHttpRequest',
            })
            response = session.get('https://vendor.voxturappraisal.com/Vendor/Information', cookies=cookies, headers=headers)
            #(response.content)
            if username in response.text:
                return True,session
            else:
                #("Login Error")
                return False,session
def get_headers(additonal_headers):        #Function to fetch the common headers used for acceptance
    try:
        headers = {
            'authority': 'vendor.voxturappraisal.com',
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'accept-language': 'en-US,en;q=0.9',
            'cache-control': 'max-age=0',
            'content-type': 'application/x-www-form-urlencoded',
            'origin': 'https://vendor.voxturappraisal.com',
            'referer': 'https://vendor.voxturappraisal.com/Account/Login',
            'sec-ch-ua': '"Chromium";v="118", "Google Chrome";v="118", "Not=A?Brand";v="99"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
            'sec-fetch-dest': 'document',
            'sec-fetch-mode': 'navigate',
            'sec-fetch-site': 'same-origin',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
        }
        
        if len(additonal_headers)> 0 :
            for a_head in additonal_headers: headers[a_head] = additonal_headers[a_head]
        return headers
    except Exception as ex:
       logging.info(ex)

def session_check(username,password, mainclient, subclient,portal,cid,ats_client_id,ats_portal_id,tmfdata,ordercheckstatus):

    import json
    headers = get_headers({
    'accept': 'application/json, text/plain, */*',
    'referer': 'https://vendor.voxturappraisal.com/',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    'x-requested-with': 'XMLHttpRequest',
})
    import requests
    session=requests.Session()
    conn = mysql.connector.connect(host="34.70.96.52",database="order_acceptance",user="order",password="acceptance",buffered=True)
    cursor = conn.cursor()
    cursor.execute("""SELECT `Session_cookie` FROM `xome` WHERE  `Username` = '{}'""".format(username))
    cookie=cursor.fetchone()[0]
    cursor.close()
    conn.close()
    if cookie ==None or cookie=='':
        session_flag,session=login(username,password,ats_client_id)
    else:
        try:
            cookies=json.loads(cookie)
            response = session.get('https://vendor.voxturappraisal.com/Vendor/Information', cookies=cookies, headers=headers)
            #(response.content)
            if username in response.text:
                #("Session valid")  
                session.cookies.update(cookies)
                session_flag=True
            else:
                session_flag,session=login(username,password,ats_client_id)
            if session_flag==False:
                #("login Error")
                logging.info('Login Error')
            else:
                try:        
                            check(session, mainclient, subclient,portal,cid,ats_client_id,ats_portal_id,tmfdata,ordercheckstatus)
                            random_sleep_time = randint(250,550)
                            #('Next account will be checked after %s seconds' % (random_sleep_time))
                            logging.info('Next account will be checked after {} seconds:'.format(random_sleep_time))
                            time.sleep(random_sleep_time) 
                except Exception as ex:
                            #(ex)
                            #('Unable to login')
                            logging.info('Unable to login')
                            time.sleep(10)
        except Exception as ex:
                        #(ex)
                        #('Unable to login')
                        logging.info('Unable to login')
                        time.sleep(10)                    



def main():
        Database_Server='192.168.2.95'
        Table_name='credentials'
        Server_username='sam'
        Server_password='working'
        while True:
            Query_Database(Database_Server,Table_name,Server_username,Server_password)
            
if __name__ == '__main__':main()
