#Modified By: Nithya C S Modified Date:13/04/2023 For Changing Average instruction to new instruction when the order type was not As-Repaired Exterior BPO or As-Repaired Exterior BPO and instruction =None#
import requests
import sys
import json
from bs4 import BeautifulSoup
import time
from pytz import timezone
import datetime
import mysql.connector
from scrapy.http import HtmlResponse
import sender
from gooey.python_bindings.gooey_decorator import Gooey
from gooey.python_bindings.gooey_parser import GooeyParser
from random import randint
from gooey.python_bindings.gooey_decorator import Gooey
from gooey.python_bindings.gooey_parser import GooeyParser
import re
import ctypes
import logging
from datetime import datetime as dt
from datetime import date
from tabulate import tabulate
from datetime import datetime as DT
import os
from os import mkdir,makedirs
from datetime import datetime as DT
import urllib.parse
from datetime import timedelta

my_date = date.today()
mail_hour= 10
mail_weekday="Monday"
rentalvalue=0

today = datetime.datetime.now()

def logger_portal(client_name,portalname,mainclient):
    """This Function is used to Setup logging"""
    path=f"BACKUP//{portalname}//{mainclient}//{client_name}//" #Check path exist
    if not os.path.exists(path):os.makedirs(path)
    LOG_FILENAME = path + '{}'.format(client_name,) + today.strftime('%d-%m-%Y-%H-%M-%S.log')
    logging.basicConfig(filename=LOG_FILENAME, level=logging.INFO)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))
    logging.getLogger("PIL.PngImagePlugin").setLevel(logging.WARNING)
    logging.getLogger().propagate=False

ctypes.windll.kernel32.SetConsoleTitleW("SingleSource_OrderUP_Portal_Checking-GR-KSH-SCR")
automails=["autogenerated@zoho.com","autogenerated1@zoho.com","autogenerated2@zoho.com","autogenerated3@zoho.com","autogenerated4@zoho.com","autogenerated5@zoho.com","autogenerated6@zoho.com","autogenerated7@zoho.com"]
photo = '375' #ecesis photographer
auto = '0' #is the order auto accepssted '0'-Not auto accepted
orderid = '1'#dummy value
# all_order_types={"HUD Property Inspection":"10","As Repaired Exterior BPO (RUSH)":"2","Insurance Loss Draft Property Inspection - Interior":"10","As-Is/As-Repaired Interior BPO":"2","Exterior BPO w/ Interior Photo Addendum":"2","48-Hour Rush Exterior BPO":"2","24-Hour Rush Exterior BPO":"2","RUSH Exterior BPO":"2","As-Repaired BPO Exterior":"2","Historical Exterior BPO - NO SUBJECT PHOTOS REQUIRED":"2","Vacant Land BPO":"2","Commercial Exterior BPO":"2","Exterior Commercial BPO":"2","Contact Residency Verification":"13","Door Knock Occupancy Check (up to 3 attempts)":"13","Exterior BPO w/Listed and Sold Comp Photos":"2","Interior Property Inspection":"10","Exterior Property Inspection - 48 Hour Rush":"13","Exterior Property Inspection":"13","As-Is Exterior BPO":"2","24Hr Rush Exterior BPO":"2","BPO Exterior 48 Hours":"2","As-Is BPO Exterior":"2","BPO Exterior w/ Listed and Sold Comp Photos":"2","Exterior Evaluation w/ Listed & Sold Comp Photos(New)":"2","HC FNMA Inspection - Exterior":"13","Exterior Property Inspection - Standard":"13","Interior Property Condition Report":"4","Post 180 Interior Property Inspection - NF":"10","BPO Exterior":"2","Historical Exterior BPO":"2","Residency Verification - 2 Attempts":"13","Exterior Property Condition Report":"4","Interior Evaluation":"1","Rush As Repaired Exterior BPO":"2","Exterior Evaluation":"2","Interior BPO":"1","As-Is Exterior BPO":"2","Property Inspection":"5","Interior Inspection":"10","Interior Property Inspection - Standard":"2","As-Repaired Exterior BPO":"2","Interior Property Inspection - QUOTE ONLY":"10","REO Exterior BPO":"2","As Is/As Repaired Exterior BPO":"2","Exterior Property Inspection - Standard":"13","REO Interior BPO":"1","As Repaired Exterior BPO":"2","48Hr Rush Exterior BPO":"2","BPO Exterior 48 Hours":"2","BPO Exterior 5 Day":"2","Exterior BPO":"2","Exterior Inspection":"13","Exterior":"2","Interior Evaluation v2":"1","Market Value BPO Exterior w/ Comp Photos":"2","BPO Interior 48 Hours":"1","BPO Interior 5 Day":"1","Exterior Property Inspection - 24 Hour Rush":"13","BPO Interior":"1","Property Inspection - Property Preservation - NF":"5","Exterior BPO w/ Listed & Sold Comp Photos":"2","Exterior BPO w/ Listed and Sold Comp Photos":"2","Property Data Collection Report":"13","Exterior Disaster Inspection":"13"}
removeHTML = re.compile('<.*?>')#remove HTML tags from address string
non_decimal = re.compile(r'[^\d.]+')#remove alphabets from price string

# all_order_types = {k.upper():v.upper() for k,v in all_order_types.items()}


SUCCESS_MESSAGE = """This is an automatic notification that one of your orders was auto-accepted using our service:

Client Name: {}
Accepted Time: {}
Due Date: {}
Provider Name: Single Source
Order Fee: {}
Order Type: {}
OrderID: {}
Address: {}
"""

def maipping_mailsend(p,address,portal,client,ordertype,to,subject):
    try:
        ordertpe_message = 'We are unable to identify the {} for the following order\n\n Address: {} \n Portal: {} \n Client: {} \n Order Type {}'.format(p,address,portal,client,ordertype)
        mail = sender.Mail('smtp.gmail.com','notifications@bpoacceptor.com','$oft@ece2021', 465, use_ssl=True,fromaddr='notifications@bpoacceptor.com')
        mail.send_message(subject=subject, to=to,body=ordertpe_message)
        #print('Mapping issue reported')
        logging.info('Mapping issue reported')
    except Exception as e:
        #(e)
        #('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        logging.error(e)
'''def tmfcheck(tmfuser,tmfpass):
    try:
        session = requests.session()
        tmfadd=[]
        url = "https://www.trackmyforeclosures.com/members/login/process/"
        data = {
                'username':tmfuser,
                'password':tmfpass,
                'submit':'Login'
                }
        response = session.post(url, data=data)
        if("Invalid Login or Password" not in response.text):
            #("Sucess Login to TMF")
            logging.info("Sucess Login to TMF")
            order=session.get("https://www.trackmyforeclosures.com/members/dashboard/getActive/?sEcho=1&iDisplayStart=0&iDisplayLength=-1")
            order=json.loads(order.text)
            for x in order["aaData"]:
                tmfadd.append(' '.join(x[3].split(",")[0].strip().split(" ")[:-2]))
            #(tmfadd)
            logging.info(tmfadd)
                
            return tmfadd
        else:
             logging.info('Lofin Failed to TMF')
    except Exception as ex:
        #(f'Exception raised .. in check function: {ex}')
        logging.info(f'Exception raised .. in check function: {ex}')'''


def validate_dateTime(date_text): #function checks if due time is present in datetime string and appends 17:00:00 if no time is present #TFS default Time 5 PM
    try:
        datetime.datetime.strptime(date_text, "%m/%d/%Y %H:%M:%S")
        return date_text
    except ValueError:
        #("Incorrect date format, should be MM/DD/YYYY H:M:S")
        logging.info("Incorrect date format, should be MM/DD/YYYY H:M:S")
        #("Appending time to date")
        logging.info("Appending time to date")
        date_text = f'{date_text} 17:00:00'  
        return date_text
#######################################################################################################################################

def client_map(username):
    try:
        cnx = mysql.connector.connect(host='34.70.96.52',database='order_acceptance',user='order',password='acceptance',autocommit=True)#set autocommit true to update DB content
        cursor = cnx.cursor(buffered=True, dictionary=True)
        #(f"""SELECT Client_name from `singlesource` where Email_address = '{username}'""")
        cursor.execute(f"""SELECT Client_name from `singlesource` where Email_address = '{username}'""")#Updated by aravind on 28/04/2023
        result = cursor.fetchone()
        cursor.close()
        cnx.close()
        return result
    except Exception as ex:
        #(f'Exception raised .. in client map function: {ex}')
        logging.info(f'Exception raised .. in client map function: {ex}')
        return None
def check_counter_accepted(address,orderid,username):
    try:
        table="mainstreetaccepted"
        database = "order_updation"
        result={}
        today = date.today()
        date_time = today.strftime('%Y-%m-%d')
        today_date=date_time+' 23:59:00'

        yesterday = today - timedelta(days=2)
        yesdate_time = yesterday.strftime('%Y-%m-%d')
        yesterday_date=yesdate_time+' 00:00:00'
        address = address.split(' ')
        address = address[0]+' '+address[1]
        #(today_date)
        #(yesterday_date)
        client_data=client_map(username)
        if client_data:
            cnx = mysql.connector.connect(host='34.70.96.52',database='order_updation',user='order',password='acceptance',autocommit=True)#set autocommit true to update DB content
            cnx.database = database
            cursor = cnx.cursor(buffered=True, dictionary=True)
            #("SELECT * FROM `mainstreetaccepted` WHERE `ClientName` = '{}' and `Address` like '{}%' AND AcceptedTime BETWEEN '{}' AND '{}' AND MailStatus = 'Countered'".format(client_data['Client_name'],address,yesterday_date,today_date))
            # data = cursor.execute("SELECT * FROM `mainstreetaccepted` WHERE `Address` like '{}%'".format(address))#Updated by aravind on 28/04/2023
            cursor.execute("""SELECT * FROM {} WHERE MailStatus='Countered' and ProviderName='Single Source' and ClientName like '{}' and Address like '{}%' and `Order_id` = '{}' AND AcceptedTime BETWEEN '{}' AND '{}'""".format(table,client_data['Client_name'],address,orderid,yesterday_date,today_date))#Updated by aravind on 28/04/2023
            result = cursor.fetchone()
            if result:
                status='Countered Order Accepted'
                mail = sender.Mail('smtp.gmail.com',result['from_mail'], result['fromaddresspwd'], 465, use_ssl=True,
                                            fromaddr=result['from_mail'])
                #('Connected to email')
                logging.info('Connected to email')
                success_message = SUCCESS_MESSAGE.format(result['ClientName'],str(datetime.datetime.now()),result['DueDate'],result['OrderFee'],result['Order Type'],result['order_id'],result['Address'])
                mail.send_message(subject='Single Source Countered order accepted!', to=('kaviya.v@ecesistech.com'), body=success_message, bcc='teamsoftware@ecesistech.com')

                localconn = mysql.connector.connect(host='34.70.96.52',database='order_updation',user='order',password='acceptance',autocommit=True,buffered=True)
                if localconn.is_connected():
                    #('Connected to MySQL database...')
                    logging.info('Connected to MySQL database...')
                    local_cursor = localconn.cursor()
                    local_cursor.execute("UPDATE `mainstreetaccepted` SET `MailStatus` = '{}' where `Order_id` = '{}' AND `ClientName` = '{}' and Address like '{}%'".format(status,result['order_id'],client_data['Client_name'],address))
                    #("UPDATE `mainstreetaccepted` SET `MailStatus` = '{}' where `Order_id` = '{}' AND `ClientName` = '{}' and Address like '{}%'".format(status,result['order_id'],client_data['Client_name'],address))
                    logging.info("UPDATE `mainstreetaccepted` SET `MailStatus` = '{}' where `Order_id` = '{}' AND `ClientName` = '{}' and Address like '{}%'".format(status,result['order_id'],client_data['Client_name'],address))
                    local_cursor.close()
                
                local_cursor.close()      
            else:
                logging.info('Not a Countered order')
        else:
            logging.info('Client Not in Acceptance')
        cursor.close()
        cnx.close()
    except Exception as ex:
        #(f'Exception raised .. in check_counter_accepted function: {ex}')
        logging.info(f'Exception raised .. in check_counter_accepted function: {ex}')

def query_db(email_id):
    try:
        localconn= mysql.connector.connect(host='34.70.96.52',database='order_updation',user='order',password='acceptance')
        if localconn.is_connected():
            #('connecting to DB....')
            logging.info("connecting to DB..")
            local_cursor=localconn.cursor()
            local_cursor.execute("SELECT Mainclient FROM tfsclientid WHERE FIND_IN_SET('{}', client)".format(email_id))
            Mainclient=local_cursor.fetchall()
            if (Mainclient== []):
                #("email not in db")
                logging.info("email not in db")
            else:
                Mainclient=str(Mainclient)
                Mainclient=Mainclient.split(',')[0].split('(')[1]
                Mainclient=Mainclient.strip("'")
                #("Mainclient:",Mainclient)
                logging.info("Mainclient:")
                logging.info(Mainclient)
                local_cursor.execute("SELECT Subclient FROM tfsclientid WHERE FIND_IN_SET('{}',client)".format(email_id))
                Subclient=local_cursor.fetchall()
                if (Subclient==[]):
                    #("Subclient not in db")
                    logging.info("Subclient not in db")
                else:
                    Subclient=str(Subclient)
                    Subclient=Subclient.split(',')[0].split('(')[1]
                    Subclient=Subclient.strip("'")
                    #("Subclient :" + Subclient)
                    con= mysql.connector.connect(host='34.70.96.52',database='order_updation',user='order',password='acceptance')
                    if con.is_connected():
                        con_cursor=con.cursor()
                        con_cursor.execute("SELECT * FROM `ss verification code` WHERE `Mainclient`='{}' AND `Subclient`='{}'".format(Mainclient,Subclient))
                        result = con_cursor.fetchall()
                        if(result== []):
                            #("no code")
                            logging.info("no code")
                        else:
                            data=str(result[0])
                            code=data.split(',')[3].split("'")[1].split("'")[0]
                            #("Found")
                            logging.info("Found")
                            return code
    except Exception as ex:
        #(f'Exception raised .. in check function: {ex}')
        logging.info(f'Exception raised .. in check function: {ex}')

def login(username,password,mainclient,subclient,ats_client_id,ats_portal_id,ordercheckstatus,portal):
    try:    
            session=requests.session()
            url = "https://us-central1-crack-mariner-131508.cloudfunctions.net/Ecesis-Authpp"
            payload = json.dumps({
            "username": username,
            "portal":"single_source"
            })
            headers = {
            'Content-Type': 'application/json'
            }
            response = requests.request("POST", url, headers=headers, data=payload)
            #(response.text)
            logging.info(response.text)
            resp=json.loads(response.text)
            cookies=resp['cookies']
            if response.status_code==200:
                login_url = 'https://ss.propertysmart.us/SS_Vendor_Login.aspx'
                headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Language': 'en-US,en;q=0.9',
            'Cache-Control': 'max-age=0',
            'Connection': 'keep-alive',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://ss.propertysmart.us',
            'Referer': 'https://ss.propertysmart.us/SS_Vendor_Login.aspx',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-User': '?1',
            'Upgrade-Insecure-Requests': '1',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
            'sec-ch-ua': '"Chromium";v="115", "Not/A)Brand";v="99"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"'
        }
                
                payload = f'__VIEWSTATE=&__VIEWSTATEGENERATOR=&txt_username={urllib.parse.quote(username)}&txt_password={urllib.parse.quote(password)}'
            
                resp = session.post(login_url,data=payload,headers=headers,cookies=cookies)
                #(resp.text) 

                if 'vweb/welcome.aspx' in resp.text:
                                
                    #('successfully login')
                    logging.info('successfully login')
                    menu_url='https://ss.propertysmart.us/transfer.aspx?page=/vweb/orders/wip_v.aspx'
                    ver = session.get(menu_url)
                    soup = BeautifulSoup(ver.content, 'html.parser')

                    VIEWSTATE = soup.find('input', attrs={'id': '__VIEWSTATE'})['value']
                    VIEWSTATEGENERATOR = soup.find('input', attrs={'id': '__VIEWSTATEGENERATOR'})['value']
                    inprogress_url='https://ss.propertysmart.us/vweb/orders/wip_v.aspx'
                    inprogress_data={
                        'VIEWSTATE1': VIEWSTATE,
                        '__VIEWSTATEGENERATOR': VIEWSTATEGENERATOR
                        }
                    inprogress_resp = session.post(inprogress_url,data=inprogress_data,headers=headers)
                    if 'Work In Progress' in inprogress_resp.text:
                        #('successfully fetching inprogress datas')
                        logging.info('successfully fetching inprogress datas')
                        return inprogress_resp,session
                    else:
                        logging.info('Login Failed')
                        return inprogress_resp,False
                else:
                    logging.info('Login Failed')
                    return resp,False
              
    except Exception as ex:
            logging.info(ex)



def session_check(username,password,mainclient,subclient,ats_client_id,ats_portal_id,ordercheckstatus,portal):        #Function to check whether the existing session is valid or not
        try:
            cnx = mysql.connector.connect(user="order",password="acceptance",host="34.70.96.52",database="order_acceptance",autocommit=True)#set autocommit true to update DB content
            cursor = cnx.cursor(buffered=True,dictionary=True)
            #fetch DB details
            cursor.execute("""SELECT * FROM `singlesource` WHERE  `Email_address` = '{}' LIMIT 1""".format(username))
            result = cursor.fetchone()
            if not result:
                #(f'ERROR : userid => {username} is not in DB !!!')
                logging.info(f'ERROR : userid => {username} is not in DB !!!')
                
            else:
                #(result)
                Session_cookie1=result['Session_cookie']
                # data = json.loads(Session_cookie1)
                # Session_cookie2 = Session_cookie1.split(",")
                # Session_cookie = Session_cookie2[0] + "}"
                #(Session_cookie1)
                ##(Session_cookie)
                # Session_cookie='{"twoFactorRemember": "FBHHAPMTJYFCC3ENK4NFPE32Z8DURE"}'
                if Session_cookie1 != '':
                    Session_cookie2 = Session_cookie1.split(",")
                    Session_cookie = Session_cookie2[0] + "}"
                    session=requests.Session()
                    cookies=json.loads(Session_cookie)
                    login_url = 'https://ss.propertysmart.us/SS_Vendor_Login.aspx'
                    headers = {
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'Accept-Language': 'en-US,en;q=0.9',
                'Cache-Control': 'max-age=0',
                'Connection': 'keep-alive',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Origin': 'https://ss.propertysmart.us',
                'Referer': 'https://ss.propertysmart.us/SS_Vendor_Login.aspx',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'same-origin',
                'Sec-Fetch-User': '?1',
                'Upgrade-Insecure-Requests': '1',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
                'sec-ch-ua': '"Chromium";v="115", "Not/A)Brand";v="99"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"'
            }
                    
                    payload = f'__VIEWSTATE=&__VIEWSTATEGENERATOR=&txt_username={urllib.parse.quote(username)}&txt_password={urllib.parse.quote(password)}'
                    #(cookies)
                    logging.info(cookies)
                    resp = session.post(login_url,data=payload,headers=headers,cookies=cookies)
        
                    #(resp.text) 
                    if 'vweb/welcome.aspx' in resp.text:
                        #('successfully login')
                        logging.info('successfully login')
                        menu_url='https://ss.propertysmart.us/transfer.aspx?page=/vweb/orders/wip_v.aspx'
                        ver = session.get(menu_url)
                        soup = BeautifulSoup(ver.content, 'html.parser')

                        VIEWSTATE = soup.find('input', attrs={'id': '__VIEWSTATE'})['value']
                        VIEWSTATEGENERATOR = soup.find('input', attrs={'id': '__VIEWSTATEGENERATOR'})['value']
                        inprogress_url='https://ss.propertysmart.us/vweb/orders/wip_v.aspx'
                        inprogress_data={
                            'VIEWSTATE1': VIEWSTATE,
                            '__VIEWSTATEGENERATOR': VIEWSTATEGENERATOR
                            }
                        inprogress_resp = session.post(inprogress_url,data=inprogress_data,headers=headers)
                        if 'Work In Progress' in inprogress_resp.text:
                            #('successfully fetching inprogress datas')
                            logging.info('successfully fetching inprogress datas')
                            return inprogress_resp,session
                    else:
                        return resp,session  
                else:
                    # return False
                    logging.info("Cookie not found. Loggining in again")
                    resp,session=login(username,password,mainclient,subclient,ats_client_id,ats_portal_id,ordercheckstatus,portal)
                    return resp,session
            
        except Exception as ex:
          
            logging.info(ex)

                    

#################################################################update ats##########################################################################


def updateATS(zadd,orderid,mainclient,subclient,portal,due,adrs,typ,portId,clientId,price,condition,instruction):
    try:
        client=mainclient+' '+subclient
        #("Order Type",typ)
        logging.info("Order Type - {}".format(typ))
        logging.info("Due Date - {}".format(due))
        #convert duedate and time to IST ==> Provide duedate - <due> in MM/DD/YYYY H:M:S format
        try:
            due = validate_dateTime(due)
            ISTdue = datetime.datetime.strptime(due, "%m/%d/%Y %H:%M:%S") + datetime.timedelta(hours=9,minutes=30)#parse datetime string to datetime object and add required time to it
            ISTdue =datetime.datetime.strftime(ISTdue, "%m/%d/%Y %H:%M:%S")#format datetime object to string
            #('IST Due Date',ISTdue)
            logging.info('IST Due Date:{}'.format(ISTdue))
        except Exception as e:
            #(f'Failed to convert duedate ==> {due} to IST',e)
            #('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
            #logging.info(f'Failed to convert duedate ==> {due} to IST')
            logging.info('Failed to convert duedate to IST')
        #=====================================================================================

            
        if not price: price="0"

        #=================================================fetching ordewr type from 52  db
        # conn = mysql.connector.connect(host="34.70.96.52",database="order_updation",user="order",password="acceptance",buffered=True)
        # cursor = conn.cursor()
        # cursor.execute("""SELECT typeid, type FROM tfstypeid WHERE FIND_IN_SET('{}', type)""".format(typ))
        # #("""SELECT typeid, type FROM tfstypeid WHERE FIND_IN_SET('{}', type)""".format(typ))
        # if(cursor.rowcount>0):
        #     typId = cursor.fetchone()[0]
        #     #(typId)
        #     #("Order Type --{}-- Found".format(typ))
        # else:
        #     #("Order Type --{}--  Not Found".format(typ))
        #     logging.info("Order Type --{}--  Not Found".format(typ))
        #     #("Using Default Type -- 7")
        #     logging.info("Using Default Type -- 7")
        #     typId = None  
        # cursor.close()
        # conn.close()
        ordertype_json = 'S:\Portal Order Updation App script\order_type.json'
        with open(ordertype_json, 'r') as json_file:
            data_type = json.load(json_file)
            for entry in data_type:
                    filedtype_values = entry['filedtype']
                    type_value =entry['values']
                    terms = filedtype_values.split(',')
                    for value in terms : 
                        if value == typ:
                            #("ordertype match found from json")
                            logging.info("ordertype match found from json")
                            for values in type_value:    
                                typId=values.get('typeid') 
                                if typId is not None:
                                    #('typId:', typId)
                                    break
                                else:
                                    #("typid not found") 
                                    logging.info("typid not found") 
                            break                    
                        else:
                            #("Order Type --{}--  Not Found".format(typ))
                            logging.info("Order Type --{}--  Not Found".format(typ))
                            #("Using Default Type -- 7")
                            logging.info("Using Default Type -- 7")
                            typId = None  
                    if typId == None:
                        #("Check next set")
                    else:
                        break
            
            #(typId)
        
                
        adrs = removeHTML.sub('', adrs)        
        adrs = re.sub('\s+', ' ', adrs).strip()
        address_copy = adrs   
        adrs = adrs.replace(",", " ").replace("  ", " ").replace(" ,", " ").replace("  ", " ").replace(" ,", " ").replace(", ", " ")
        adrs = re.sub('\s+', ' ', adrs).strip()
        
        trimsubj="" #trimsubj --> remove 4 digit extension to zipcode from address if present,this will be passed as subchk
        n = adrs.split(" ")
        r = n[-1].split("-")
        r[0] = str(r[0]).replace(",", "")
        n[-1] = r[0]
        for i in range(0,len(n)): trimsubj = trimsubj + ' '+ n[i]
        
        trimsubj = trimsubj.strip()

        zipcode = n[-1].split("-")
        zipcode = str(zipcode[0]).replace(",", "").strip()

        if len(zipcode) > 5 or len(zipcode)< 3 or not zipcode.isdigit(): zipcode=None
        else: zipcode = zipcode.zfill(5) #add leading zeroes to make zipcode 5 digit,incase of 3 or 4 digit zipcodes

        #('zipcode',zipcode)

        addressTrm = adrs.replace("~", "   ")
        subchk = trimsubj.replace("~", "   ")

        price = non_decimal.sub('', str(price)).strip()
        #("Order Price",price)
        logging.info('Order Price:{}'.format(price))

        ############checking ELIZABETH NY OR NJ#############
        #("CHECKING WHETHER ORDER ACCEPTED FOR MATTHEW-ELIZABETH NY OR MATTHEW-ELIZABETH NJ............")
        logging.info("CHECKING WHETHER ORDER ACCEPTED FOR MATTHEW-ELIZABETH NY OR MATTHEW-ELIZABETH NJ............")
        #(clientId)
        logging.info(clientId)
        if clientId=="10742" or clientId=="10743":
                state=adrs.split()[-2]
                #(state)
                logging.info("STATE:{}".format(state))
                #("CHECKING STATE (NY or NJ)")
                logging.info("CHECKING STATE (NY or NJ)")
                if state=="NY":
                    clientId=10742
                elif state=="NJ":
                    clientId=10743
                else:
                    #("CHECK THE ORDER...........")
                    logging.info("CHECK THE ORDER...........")
        ###################################################################################
        if clientId=='97' and (typId=='10' or typId=='12' or typId=='13' or typId=='14' or typId=='17' or typId=='18' or typId=='9' or typId=='4'):
         #('Inspection order of Vernon')
         logging.info('Inspection order of Vernon')
         
        elif typId and zipcode and portId and clientId:
                #('Updating Order Details to TFS..........')
                logging.info('Updating Order Details to TFS..........')
                
                session1 = requests.Session()
                rentalvalue=0
                inputData = "{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~".format(orderid,due,addressTrm,typId,portId,photo,clientId,price,zipcode,auto,subchk,address_copy,
                                                                             ISTdue,condition,rentalvalue)
                instruction="{}".format(instruction)
                splinstruction="We are not able to update the instruction. Please check the portal."
                #(inputData)
                logging.info('inputData : {}'.format(inputData))
                payload={
                     "clientId":clientId,
                     "procData":inputData,
                     "instructions":instruction,
                     "splInstructions":splinstruction
                    }
                #(payload)
                # url="http://13.200.17.36//ecesisapp/ats/Home/AddOrder"
                url="https://bpotrackers.com/ecesisapp/ats/Home/AddOrder"
                try:
                        response = session1.post(url,data=payload)
                except:
                        session1 = requests.Session()
                        response = session1.post(url,data=payload)
                #(response.text)
                resx=response.text
                logging.info('response: {}'.format(resx))
                if 'Success' not in resx:
                        #('Updation Failed..........')
                        logging.info('Updation Failed..........')
                else:
                        #('Successfully updated the order')
                        logging.info('Successfully updated the order')
                        ######################################################################
                        today=DT.now
                        year1=today().strftime('%Y')
                        month=today().strftime('%B')
                        currentdate=today().strftime('%m-%d-%Y')
                        #(currentdate)       
                        logging.info("Currentdate {}".format(currentdate))
                        def foldercreation():        
                            folder="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                            os.makedirs(folder)
                            #("folder created")
                            logging.info("folder created")
                        if zadd.__contains__('#') or zadd.__contains__('Union') or zadd.__contains__('UNION') or zadd.__contains__('APT') or zadd.__contains__('apt'):
                            foldercreation()
                        else:
                            trial=zadd.replace(",","")
                            trial=trial.strip()
                            #("replaced trial:",trial)
                            trial=trial.split(" ")           
                            zip=trial[-1]   
                            #("folderzip:",zip)
                            logging.info(zip)
                            trial=trial[:2]
                            x=" ".join(trial)
                            trial=x.lower()    
                            #("foldertrial:",trial)   
                            logging.info(trial)      
                            path="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient
                            #(os.listdir(path))
                            logging.info(os.listdir(path))
                            addfolders=os.listdir(path)
                            for i in addfolders:
                                oldaddress=i
                                i=i.replace(",","")
                                i=i.split(" ")
                                zippro=i[-1]   
                                typeofzip=zippro.isdigit()          
                                list=i[:2]
                                x=" ".join(list)
                                listadd=x.lower()
                                #("listadd=",listadd)
                                #("zippro:",zippro)
                                #("i=",i)
                                if trial==listadd and zip==zippro:
                                    old="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+oldaddress
                                    new="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                                    os.rename(old,new)
                                    #("Folder renamed")
                                    logging.info("Folder renamed")
                                    break
                                elif trial==listadd and typeofzip==False:
                                    old="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+oldaddress
                                    new="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                                    os.rename(old,new)
                                    #("Folder renamed")
                                    logging.info("Folder renamed")
                                    break  
                                else:
                                    #("match not found moving to next address")                   

                            #(addfolders.__contains__(zadd))
                            try:
                                if addfolders.__contains__(zadd)==False:
                                    foldercreation()
                                else:
                                    #("no need to create folder")
                                    logging.info("no need to create folder")
                            except Exception as e:
                                #(e)
            #####################################################################
        else:
                if not clientId:
                    #('Client Not Active or Unable to Map Client!!')
                    logging.info('Client Not Active or Unable to Map Client!!')
                    if client!="Sharyn" and client!="Sharyn Sharyn" and client!="Sharyn Jenny" and client!="Sharyn Matt" and client!="Matthew Daw" and client!="Sharyn-Sharyn" and client!="Sharyn-Jenny" and client!="Sharyn-Matt":
                        maipping_mailsend('clientname',address_copy,portal,client,typ,'teamsoftware@ecesistech.com','Mapping Failed.... Clientname!')
                if not zipcode:
                    #('Invalid Zipcode!!')
                    logging.info('Invalid Zipcode!!')
                if not typId:
                    if "Asset Management" not in typ: #updated by Nithya C S On 19/07/2023 Whenever the corresponding order type mapping issue occurs, we do not want to send an email indicating that the Mapping Failed.... Order Type!
                        #('Unable to map order Type -- {}'.format(typ))
                        logging.info('Unable to map order Type -- {}'.format(typ))
                        maipping_mailsend('ordertype',address_copy,portal,client,typ,'mapping@ecesistech.com','Mapping Failed.... Order Type!')
                if not portId:
                    #('Unable to map portakl!!')
                    logging.info('Unable to map portakl!!')
    except Exception as ex:
        #(f'Exception raised .. in check function: {ex}')
        logging.info(f'Exception raised .. in check function: {ex}')
                        


##############################################fetch orders details#############################################################
def check(session,resp,username,password,mainclient,subclient,ats_client_id,ats_portal_id,ordercheckstatus,portal,cid):
    try:
        #('==============================')
        if session:
            #('Refreshing Portal')
            soup = BeautifulSoup(resp.content, 'html.parser')
            ordid=soup.select("a[href*=load_order]")
            ordersinprogress=len(ordid)
            if ordersinprogress>0:
                l=[]
                for d in ordid:
                    ordid=str(d)
                    ordid=ordid.split('a href="javascript:load_order(')
                    ordid=ordid[1]
                    ordid=ordid.split(')')
                    ord1= ordid[0]
                    if str(ord1) not in l:
                                l.append(ord1)
                                #("Order is: ",ord1)
                                order_url='https://ss.propertysmart.us/vweb/orders/order_detail_v.aspx'
                              
                                headers={
                                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                                        'Accept-Encoding': 'gzip, deflate, br',
                                        'Accept-Language': 'en-US,en;q=0.9',
                                        'Cache-Control': 'max-age=0',
                                        'Connection': 'keep-alive',
                                        'Host': 'ss.propertysmart.us',
                                        'Origin': 'https://ss.propertysmart.us',
                                        'Referer': 'https://ss.propertysmart.us/vweb/orders/wip_v.aspx',
                                        'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="101", "Google Chrome";v="101"',
                                        'sec-ch-ua-mobile': '?0',
                                        'sec-ch-ua-platform': "Windows",
                                        'Sec-Fetch-Dest': 'frame',
                                        'Sec-Fetch-Mode': 'navigate',
                                        'Sec-Fetch-Site': 'same-origin',
                                        'Sec-Fetch-User': '?1',
                                        'Upgrade-Insecure-Requests':'1',
                                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36'
                                        }
                                v=session.get(order_url)
                                soup = BeautifulSoup(v.content, 'html.parser')
                                VIEWSTATE = soup.find('input', attrs={'id': '__VIEWSTATE'})['value']
                                VIEWSTATEGENERATOR = soup.find('input', attrs={'id': '__VIEWSTATEGENERATOR'})['value']
                                #(VIEWSTATE)
                                #(VIEWSTATEGENERATOR)
                                order_data={
                                       'VIEWSTATE1': VIEWSTATE,
                                       '__VIEWSTATEGENERATOR': VIEWSTATEGENERATOR,
                                       'business_form_id': "",
                                       'base_event_task_id': "",
                                       'step_path': '/search/info.aspx?step=1&sub_step=|sub_step|&screen_id=358',
                                        'edit_address_id': "",
                                        'remove_address_id':"" ,
                                        'toolbar_id': "",
                                        'toolbar_action': "" ,
                                        'customer_account_id': "",
                                        'dte_modified': "",
                                        'sort_field': "",
                                        'order_detail_id': ord1,
                                        'business_product_id':"0" ,
                                        'search_type': 'order_number',
                                        'search_value': "",
                                      }

                                order_resp = session.post(order_url,data=order_data,headers=headers)
                                order_resp=order_resp.text
                                order_resp = HtmlResponse(url="my HTML string", body=order_resp.replace('\xa0','').replace('\t','').replace('\n',''), encoding='utf-8')
                                address1=order_resp.xpath("//td[contains(text(),\"Property Address: \")]//following::td//text()").extract_first()
                                address1=address1.strip()
                                #(address1)
                                logging.info(address1)
                                address2=order_resp.xpath("//td[contains(text(),\"Property Address: \")]//following::td//text()").extract()[1]
                                address2=address2.strip()
                                #(address2)
                                logging.info(address2)
                                duedate=order_resp.xpath("//td[contains(text(),\"Due Date:\")]//following::td//text()").extract_first()
                                ordertype=order_resp.xpath("//td[contains(text(),\"Product Description:\")]//following::td//text()").extract_first()
                                price=order_resp.xpath("//td[contains(text(),\"Fee:\")]//following::td//text()").extract_first()
                                #('.........details..........')
                                logging.info('.........details..........')
                                address=address1+' '+address2
                                address3=address.split(',')[1]
                                address0=address.split(',')[0]
                                #(address3)
                                address3=address3.strip()
                                address3=address3.replace('\xa0',',')
                                address4=address3.split(',')
                                #('=====>',address4)
                                if len(address4)==5:
                                      address4.pop(4)
                                address4=' '.join(address4)
                                address=address0+' '+address4
                                #(address)
                                logging.info(address)
                                check_counter_accepted(address,ord1,username)
                                #(duedate)
                                logging.info(duedate)
                                #(ordertype)
                                logging.info(ordertype)
                                #(price)
                                logging.info(price)
                                ####################################################################################################################################   
                                portaladdress = re.sub('\s+', ' ', address).strip()
                                #(portaladdress)
                                logging.info("Org Address: {}".format(portaladdress))
                                zadd=portaladdress
                                logging.info('Zillowaddress : {}'.format(zadd))
    ###############################################################################################################################
                                try:
                                    instruction=order_resp.xpath("//td[contains(text(),\"Notes/Updates\")]//following::tr//tr//td//text()").extract()
                                    instruction=" ".join(instruction)
                                    #('instruction',instruction)
                                    logging.info("instruction:{}".format(instruction))
                                    instruction=instruction.strip()
                                    ordertype=ordertype.strip()
                                    if (('As-Repaired Exterior BPO' not in ordertype) or ('As Repaired Exterior BPO' not in ordertype)) and (instruction==''):
                                        condition="New"
                                        instruction="We are not able to update the instruction. Please check the portal."                                                                                 
                                        logging.info(condition)
                                        success_message = """Check this New instruction in Single Source Orderupdation """.format(str(datetime.datetime.now()), mainclient, subclient,portal)
                                        mail = sender.Mail('smtp.gmail.com','autobponotifier@gmail.com','ecebpo14', 465, use_ssl=True,
                                        fromaddr='autobponotifier@gmail.com')
                                        #('Mail Send')
                                        updateATS(zadd,orderid,mainclient,subclient,portal,duedate,address,ordertype,ats_portal_id,ats_client_id,price,condition,instruction)
                                    elif (('As-Repaired Exterior BPO' in ordertype) or ('As Repaired Exterior BPO' in ordertype)) and (instruction==''):
                                        condition="Good"
                                        instruction="We are not able to update the instruction. Please check the portal."
                                        logging.info(condition)
                                        updateATS(zadd,orderid,mainclient,subclient,portal,duedate,address,ordertype,ats_portal_id,ats_client_id,price,condition,instruction)
                                    elif instruction:
                                        condition=updateCondition(time.strftime("%m/%d/%Y"),subclient,mainclient,ordertype,address,duedate,portal,price,instruction)
                                        updateATS(zadd,orderid,mainclient,subclient,portal,duedate,address,ordertype,ats_portal_id,ats_client_id,price,condition,instruction)
                                    else:
                                        instruction="We are not able to update the instruction. Please check the portal."
                                        #('instuction not available')
                                        logging.info('instuction not available')
                                        condition = 'New'
                                        updateATS(zadd,orderid,mainclient,subclient,portal,duedate,address,ordertype,ats_portal_id,ats_client_id,price,condition,instruction)
                                except Exception as e:
                                    #(e)
                                    #('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                                    logging.info(e)
                                    ##condition_mail(address)### Commented For Disable Condition Fetching Mail Sent If the Condition is unable to Fetch 4/05/2023 (Nithya) ###
                                    #('Unable to Fetch condition')
                                    logging.info('Unable to Fetch Condition')
        
            else:
                #('No orders in inprogress')
                logging.info('No orders in inprogress')
        else:
            url = "http://192.168.2.95/uporder/uppython.php?$cid={}".format(cid)
            r = requests.get(url)
            #('Bad Password')
            logging.info('Bad Password')
    except Exception as ex:
        #(f'Exception raised .. in check function: {ex}')
        logging.info(f'Exception raised .. in check function: {ex}')


def updateCondition(date,subclient,mainclient,AssetType,address,duedate,portal,price,condition):
    try:
        #(portal)
        #(AssetType)
        #(condition)
        
        #creates a new entry in order updation DB with order special instructions corresponding to the order extracted from Bpofulfillment portal
        #if the order is already available in the DB with date in range of 6 days from today then only the condition field is updated(If it is empty),if the condition field is not empty then no changes are made
        prevdate1 = (datetime.datetime.now() - datetime.timedelta(1)).strftime('%m/%d/%Y')
        prevdate2 = (datetime.datetime.now() - datetime.timedelta(2)).strftime('%m/%d/%Y') 
        prevdate3 = (datetime.datetime.now() - datetime.timedelta(3)).strftime('%m/%d/%Y') 
        prevdate4 = (datetime.datetime.now() - datetime.timedelta(4)).strftime('%m/%d/%Y') 
        prevdate5 = (datetime.datetime.now() - datetime.timedelta(5)).strftime('%m/%d/%Y') 
        prevdate6 = (datetime.datetime.now() - datetime.timedelta(6)).strftime('%m/%d/%Y')
        tommorrow = (datetime.datetime.now() + datetime.timedelta(1)).strftime('%m/%d/%Y')
        date=datetime.datetime.now().strftime('%m/%d/%Y')
        BAD = ['The client notes these homes have been fully rehabbed in the amount included.']
        if ('As-Repaired Exterior BPO' in AssetType) or ('As Repaired Exterior BPO' in AssetType):
              condition='Good'
        elif condition in BAD: condition = 'Bad'
        elif any(x.lower() in condition for x in BAD): condition = 'Bad'
        elif 'Rehab' in condition or 'rehab' in condition:
                 condition='Bad'
        elif 'Purchase Price:' in condition:
                 condition='Bad'
        else:
                 condition='New'
        #(condition)
        logging.info(condition)
        #connection to our order updation DB
        
        localconn = mysql.connector.connect(host='34.70.96.52',database='order_updation',user='order',password='acceptance',autocommit=True,buffered=True)
        if localconn.is_connected():
                #('Connected to MySQL database...')
                logging.info('Connected to MySQL database...')
                local_cursor = localconn.cursor()
                #("SELECT `id`,`condition` FROM `orders` WHERE (`address` LIKE '{}' AND `client`='{}' AND `subclient` = '{}' AND `portal` = '{}') AND `date` IN ('{}','{}','{}','{}','{}','{}','{}','{}')".format(address,mainclient,subclient,portal,date,tommorrow,prevdate1,prevdate1,prevdate2,prevdate3,prevdate4,prevdate5,prevdate6))
                logging.info("SELECT `id`,`condition` FROM `orders` WHERE (`address` LIKE '{}' AND `client`='{}' AND `subclient` = '{}' AND `portal` = '{}') AND `date` IN ('{}','{}','{}','{}','{}','{}','{}','{}')".format(address,mainclient,subclient,portal,date,tommorrow,prevdate1,prevdate1,prevdate2,prevdate3,prevdate4,prevdate5,prevdate6))
                local_cursor.execute("SELECT `id`,`condition` FROM `orders` WHERE (`address` LIKE '{}' AND `client`='{}' AND `subclient` = '{}' AND `portal` = '{}') AND `date` IN ('{}','{}','{}','{}','{}','{}','{}','{}')".format(address,mainclient,subclient,portal,date,tommorrow,prevdate1,prevdate1,prevdate2,prevdate3,prevdate4,prevdate5,prevdate6))
                rc = local_cursor.rowcount
                #(rc)
                logging.info(rc)
                if rc > 0:
                        queryRes = local_cursor.fetchall()[0]
                        if rc == 1 and not queryRes[1]:                             #queryRes[1] contains condition field data
                                #('Updating Condition to available address...')
                                logging.info('Updating Condition to available address...')
                                #("UPDATE `orders` SET `condition` = '{}' where `id` = '{}' AND `date` IN ('{}','{}','{}')".format(condition,queryRes[0],date,tommorrow,prevdate1))
                                logging.info("UPDATE `orders` SET `condition` = '{}' where `id` = '{}' AND `date` IN ('{}','{}','{}')".format(condition,queryRes[0],date,tommorrow,prevdate1))
                                local_cursor.execute("UPDATE `orders` SET `condition` = '{}' where `id` = '{}' AND `date` IN ('{}','{}','{}')".format(condition,queryRes[0],date,tommorrow,prevdate1))
                        else :
                                #("Duplicate Order")
                                logging.info("Duplicate Order")
                                   
                                
                        
                else:
                        #('Creating new entry with condition...')
                        logging.info('Creating new entry with condition...')
                        #### CHECKING DUPLICATES#####
                        #("SELECT `address` FROM `orders` WHERE `address` = '{}' AND `client` = '{}' AND `portal` = '{}' AND `date` IN ('{}','{}')".format(address,mainclient,portal,date,prevdate1))
                        local_cursor.execute("SELECT `address` FROM `orders` WHERE `address` = '{}' AND `client` = '{}' AND `portal` = '{}'".format(address,mainclient,portal,date,prevdate1))
                        logging.info("SELECT `address` FROM `orders` WHERE `address` = '{}' AND `client` = '{}' AND `portal` = '{}'".format(address,mainclient,portal,date,prevdate1))
                        count=len(local_cursor.fetchall())
                        if(count==0):
                                #("INSERT INTO `orders`(`date`, `client`, `subclient`, `address`, `duedate`, `portal`, `price`, `type`, `time`, `pic`, `pastdue`,`pastdate`,`status`, `condition`) VALUES ('{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}')".format(date,mainclient,subclient,address,duedate,portal,price,AssetType, datetime.datetime.now(),"No","No","NA","Neworder",condition))
                                local_cursor.execute("INSERT INTO `orders`(`date`, `client`, `subclient`, `address`, `duedate`, `portal`, `price`, `type`, `time`, `pic`, `pastdue`,`pastdate`,`status`, `condition`) VALUES ('{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}')".format(date,mainclient,subclient,address,duedate,portal,price,AssetType, datetime.datetime.now(),"No","No","NA","Neworder",condition))
                                logging.info("INSERT INTO `orders`(`date`, `client`, `subclient`, `address`, `duedate`, `portal`, `price`, `type`, `time`, `pic`, `pastdue`,`pastdate`,`status`, `condition`) VALUES ('{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}')".format(date,mainclient,subclient,address,duedate,portal,price,AssetType, datetime.datetime.now(),"No","No","NA","Neworder",condition))
                                #("New order inserted")
                                logging.info("New order inserted")
                        else:
                                #("Order already inserted into DB-----Duplicate")
                                logging.info("Order already inserted into DB-----Duplicate")
                local_cursor.close()
                localconn.close()

        else:
                #('DB Connection Failed')
                logging.info('DB Connection Failed')
        localconn.close()

        return condition
    

    except Exception as ex:
                #('------->',ex)
                #('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
                logging.info(ex)
                

#--------------------------Main Function-------------------------------------------------#OR form LIKE 'Xome' OR  form LIKE 'New Sam' OR form LIKE 'ORSS'
def Query_JSON(json_file_path):
            with open(json_file_path, 'r') as json_file:
                data = json.load(json_file)
                cid = sys.argv[1]
                cid=int(cid)
                filtered_data = [entry for entry in data if entry.get("filedtype") == cid]
                #(filtered_data)
            for value in filtered_data:
                for values in value['values']:
                    mainclient = values.get('mainclient')
                    subclient = values.get('subclient')
                    portal = values.get('portal')
                    username = values.get('username')
                    password = values.get('password')
                    credstatus = values.get('credstatus')
                    ordercheckstatus = values.get('ordercheckstatus')
                    ats_client_id = values.get('ats_client_id')
                    ats_portal_id = values.get('ats_portal_id')

                    #('Fetching details from JSON file...')
                    #('CID:', cid)
                    #('Mainclient:', mainclient)
                    #('Subclient:', subclient)
                    #('Portal:', portal)
                    #('Username:', username)
                    #('Password:', password)
                    #('Credstatus:', credstatus)
                    #('Ordercheckstatus:', ordercheckstatus)
                    #('ATS Client ID:', ats_client_id)
                    #('ATS Portal ID:', ats_portal_id)
                    ctypes.windll.kernel32.SetConsoleTitleW(f"{subclient}-{portal}")
                    logger_portal(subclient,portal,mainclient)
                    headers={}#sending headers to prevent login denied ORSS issue
                    if credstatus == 'Active':

                            #('Checking {} - {} ->{} account'.format(mainclient,subclient,portal))
                            logging.info('Checking {} - {} ->{} account'.format(mainclient,subclient,portal))
                            ###################################################################################
                            try:
                                    if portal == 'SS':
                                        try:
                                                    resp,session=session_check(username,password,mainclient,subclient,ats_client_id,ats_portal_id,ordercheckstatus,portal)
                                                    logging.info(resp.text)
                                                    check(session,resp,username,password,mainclient,subclient,ats_client_id,ats_portal_id,ordercheckstatus,portal,cid)
                                                    random_sleep_time = randint(900,1200)
                                                    #('Next account will be checked after %s seconds' % (random_sleep_time))
                                                    logging.info('Next account will be checked after {} seconds:'.format(random_sleep_time))
                                                    time.sleep(random_sleep_time) 
                                        except Exception as ex:
                                                    #(resp.text)
                                                    #('Unable to login')
                                                    #('Exception rised ..',ex)
                                                    #('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
                                                    logging.info('Unable to login')
                                                    time.sleep(10)
                                    ###################################################################################
                                    else:
                                        #('Portal not added in order updation')
                                        logging.info('Portal not added in order updation')
                                        
                            except Exception as ex:
                                            #('Exception rised ..',ex)
                                            #('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
                                            logging.info('Exception rised ..')
                                            time.sleep(10)
                    else:
                        #('Bad Password')
                        logging.info('Bad Password')
                        random_sleep_time = randint(900,1200)
                        #('Next account will be checked after %s seconds' % (random_sleep_time))
                        logging.info('Next account will be checked after {} seconds:'.format(random_sleep_time))
                        time.sleep(random_sleep_time)
                        try:
                                
                                if mainclient == 'Ghulam' and subclient in ['Hanna', 'Yolanda', 'Teresa', 'Rick']:
                                    client_type = 'Ghulam'
                                elif mainclient == 'Green Realty' and subclient in ['GR_Antony', 'GR_Deanna', 'GR_Joan', 'GR_Haley']:
                                    client_type = 'Green Realty'
                                elif mainclient == 'Showcase Realty' and subclient in ['Lindsay Friedman', 'Riley Bevan']:
                                    client_type = 'Showcase Realty'
                                elif mainclient == 'Bang' and subclient == 'Andrew':
                                    client_type = 'Bang'
                                else:
                                    client_type = None

                                if client_type:
                                    success_message = """Hi,\n\nThis is an auto-generated mail to inform you that order updation was failed due to a BAD PASSWORD!!!!! \nTime: {}\nMain Client: {}\nSubclient: {}\nPortal: {} """.format(str(datetime.datetime.now()), mainclient, subclient, portal)
                                    mail = sender.Mail('smtp.gmail.com', 'notifications@bpoacceptor.com', '$oft@ece2021', 465, use_ssl=True, fromaddr='notifications@bpoacceptor.com')
                                    mail.send_message(subject='Order Updation Failed', to=('ssorderupd@ecesistech.com', 'tvmcommunicationteam@gmail.com'), body=success_message)
                                    #('Mail Sent')
                                    #("Not able to Login {}-{} Account.".format(mainclient, subclient))
                                else:
                                    #('No need to send mail notification')

                        except Exception as ex:
                                #('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
                                #(ex)
                                    
                        count_rem=int(count_rem)-1
                        #('connection closed')
                #('connection closed')


def condition_mail(address):
        try:
                mail = sender.Mail('smtp.gmail.com', 'notifications@bpoacceptor.com' , 'Eces!s2019*', 465, use_ssl=True,fromaddr='notifications@bpoacceptor.com')
                #('Connected to email')
                logging.info('Connected to email')
                cond_fetch_message = """This is an automatic notification:
                                Unable to fetch condition for the order {}.""".format(address)
                #(cond_fetch_message)
                logging.info(cond_fetch_message)
                mail.send_message(subject='Condition Fetching Failed!!!', to=('teamsoftware@ecesistech.com'), body=cond_fetch_message)
                #('Mail sent')
                logging.info('Mail sent')
        except Exception as e:
                #(e)
                #('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                logging.info(e)
                #('Unable to send mail')
                
json_file_path = 'S:\Portal Order Updation App script\output_data.json'
def main():
    while True:
        Query_JSON(json_file_path)

if __name__ == '__main__':main()
