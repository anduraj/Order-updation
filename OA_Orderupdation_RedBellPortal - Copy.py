import requests
import json
import time
from pytz import timezone
import random
import datetime
import mysql.connector
from scrapy.http import HtmlResponse
import sender
from gooey.python_bindings.gooey_decorator import Gooey
from gooey.python_bindings.gooey_parser import GooeyParser
from random import randint
from gooey.python_bindings.gooey_decorator import Gooey
from gooey.python_bindings.gooey_parser import GooeyParser
import re
import ctypes
import logging
from datetime import timedelta
from datetime import datetime as dt
from datetime import date
from datetime import datetime as DT
import os
import html
from os import mkdir,makedirs
from datetime import datetime as DT
import sys

my_date = date.today()
mail_hour= 10
mail_weekday="Monday"
rentalvalue=0


today = datetime.datetime.now()

def logger_portal(client_name,portalname,mainclient):
    """This Function is used to Setup logging"""
    path=f"BACKUP//{portalname}//{mainclient}//{client_name}//" #Check path exist
    if not os.path.exists(path):os.makedirs(path)
    LOG_FILENAME = path + '{}'.format(client_name,) + today.strftime('%d-%m-%Y-%H-%M-%S.log')
    logging.basicConfig(filename=LOG_FILENAME, level=logging.INFO)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))
    logging.getLogger("PIL.PngImagePlugin").setLevel(logging.WARNING)
    logging.getLogger().propagate=False
 

automails=["autogenerated@zoho.com","autogenerated1@zoho.com","autogenerated2@zoho.com","autogenerated3@zoho.com","autogenerated4@zoho.com","autogenerated5@zoho.com","autogenerated6@zoho.com","autogenerated7@zoho.com"]
photo = '375' #ecesis photographer
auto = '0' #is the order auto accepted '0'-Not auto accepted
orderid = '1'#dummy value
# all_order_types={"5 Day Interior BPO":"1","5 Day Interior Disaster Inspection":"10","PIR Pro Exterior":"2","5 Day Interior Property Inspection":"10","5 Day MIT ARBPO":"21","5 Day Interior Appraiser Reconciled BPO":"1","QBPO VPS Interior":"1","QBPO VPS Exterior":"2","QBPO Exterior":"2","QBPO Interior":"1","QField Insp Ext":"13","QField Insp Int":"10",
#                  "BPO - Interior":"1","BPO - Exterior":"2","BPO - Interior (with HUD Addendum)":"1","CMA Exterior SFR":"2","CMA Exterior":"2","CMA Exterior Condo":"2",
#                  "MIT CMA Int SFR":"1","BPO Exterior":"2","CMA Interior":"1","CMA Interior - Condo":"1","CMA Interior - SFR":"1","Condition Report Interior":"10",
#                  "EWRA":"11","Exte":"2","EARB":"2","Inte":"1","IREO":"1","IARB":"1","IWRA":"8","Exterior":"2","EREO":"2","Exterior BPO":"2","Interior BPO":"1",
#                  "Inspection Interior":"10","Inspection Exterior":"13","Bpo Exterior + Rental":"11","Bpo Interior":"1","Bpo Interior + Rental":"8" ,
#                  "Inspection Interior":"10", "Inspection Interior + Rental":"9", "Inspection Exterior + Rental":"12","Bpo Exterior":"2","3 Day Exterior BPO - W Rentals":"11"
#                  ,"5 Day Exterior BPO - W Rentals":"11","5 Day Exterior BPO":"2","5 Day Exterior Appraiser Reconciled BPO":"2","3 Day Exterior Appraiser Reconciled BPO":"2",
#                  "5 Day Exterior Amplified Appraisal Report":"13","5 Day Exterior Disaster Inspection":"13","3 Day Exterior Property Inspection":"13","3 Day Exterior BPO":"2"
#                  ,"5 Day Interior BPO - W Rentals":"8","5 Day Interior Amplified Appraisal Report":"10","3 Day Exterior Amplified Appraisal Report":"13","5 Day Exterior Property Inspection":"13","3 Day Exterior Disaster Inspection":"13","5 Day Exterior Amplified Appraisal Report":"13","5 Day Interior Enhanced BPO":"1","5 Day Exterior Enhanced BPO":"12"}

# all_order_types = {k.upper():v.upper() for k,v in all_order_types.items()} #convert order type keys to uppper case for proper comparison
removeHTML = re.compile('<.*?>')#remove HTML tags from address string
non_decimal = re.compile(r'[^\d.]+')#remove alphabets from price string

def document_dwnload(respp, rlen, mainclient, address, session):
    for i in range(1, rlen+1):
        try:
            ##("Trying to download...")
            logging.info("Trying to download...")
            doc_name = respp.xpath("//table/tbody/tr[{}]/td[2]/text()".format(i)).get()
            logging.info('doc_name :{}'.format(doc_name))
            dwn_url = respp.xpath("//table/tbody/tr[{}]/td[4]/a".format(i))
            href = dwn_url.xpath('@href').get()
            href = 'https://valuationops.homegenius.com'+href
            extnsn = href.split('.')[-1]
            logging.info('extention:{}'.format(extnsn))
            ##('url:', href)
            logging.info('url :{}'.format(href))
            year = datetime.datetime.now().strftime('%Y')
            month = datetime.datetime.now().strftime('%B')
            date = datetime.datetime.now().strftime('%m-%d-%Y')
            try:
                path_to_file = 'Z:\\BPO\\{}\\{}\\{}\\{}\\AUTOBPO\\{}\\Document'.format(year, month, date, mainclient, address.split(',')[0])
                logging.info('path: {}'.format(path_to_file))
                if not os.path.exists(path_to_file):
                    os.makedirs(path_to_file)
                try:
                    response = session.get(href)
                    logging.info('response->>>>>>>>>>>>{}'.format(response.content))
                    file = open("{}\\{}({}).{}".format(path_to_file, doc_name, i, extnsn), 'wb')
                    file.write(response.content)
                    file.close()
                except Exception as x:
                    logging.info(x)
            except Exception as x:
                logging.info(x)
        except Exception as x:
            logging.info(x)

def OA_Available(session, itemid, orderid, mainclient, address):
    try:
        url_data = {}
        respp = session.get('https://valuationops.homegenius.com/VendorPortal/DownloadDocument?OrderId={}&ItemId={}&Source=VENDORPORTAL'.format(orderid, itemid))
        respp = respp.text
        logging.info("Capturing response")
        #("Capturing response")

        respp = HtmlResponse(url="my HTML string",body=respp, encoding='utf-8')
        logging.info('Response:\n{}\n'.format(respp.text))
        try:
            rows = respp.xpath("//table/tbody/tr").extract()
            ##("Documents available for order: ", rows)
            logging.info('Documents available for order: {}'.format(rows))
            rlen = len(rows)
            ##("no of rows:", rlen)
            logging.info('no of rows: {}'.format(rlen))
            try:
                doc_dtl = ' '.join(map(str, rows))
                if (("Agent LOE" in doc_dtl) and (rlen > 1)):
                    logging.info("condition 1")
                    condition = 'OA/Doc'
                    ##('<<<<<<<<<<<< condition is OA/Doc Available >>>>>>>>>>>>>>')
                    logging.info("condition 1")
                    logging.info('condition is :{}'.format(condition))
                    document_dwnload(respp, rlen, mainclient, address, session)
                else:
                    if (("Agent LOE" not in doc_dtl) and (rlen > 0)):
                        logging.info("condition 2")
                        condition = 'OA/Doc'
                        ##('<<<<<<<<<<<< condition is OA/Doc Available >>>>>>>>>>>>>>')
                        logging.info('condition is :{}'.format(condition))
                        document_dwnload(respp, rlen, mainclient, address, session)
                    else:
                        condition = None
                        #('No Additional doccuments to be verified')
                        logging.info('No Additional doccuments to be verified')
                return condition
            except Exception as x:
                logging.error(x)
        except Exception as e:
            ##(e)
            logging.error(e)
    except Exception as e:
        #('exception in OA Available function', e)
        logging.error(e)
        
def maipping_mailsend(p,address,portal,client,ordertype,to,subject):
    try:
        ordertpe_message = 'We are unable to identify the {} for the following order\n\n Address: {} \n Portal: {} \n Client: {} \n Order Type {}'.format(p,address,portal,client,ordertype)
        mail = sender.Mail('smtp.gmail.com','notifications@bpoacceptor.com','$oft@ece2021', 465, use_ssl=True,fromaddr='notifications@bpoacceptor.com')
        mail.send_message(subject=subject, to=to,body=ordertpe_message)
        ##('Mapping issue reported')
        logging.info('Mapping issue reported')
    except Exception as e:
        ##(e)
        logging.error(e)

#--------------------------Main Function-------------------------------------------------#OR form LIKE 'Xome' OR  form LIKE 'New Sam' OR form LIKE 'ORSS'
def Query_JSON(json_file_path):
    with open(json_file_path, 'r') as json_file:
        data = json.load(json_file)
        cid = sys.argv[1]
        cid=int(cid)
        filtered_data = [entry for entry in data if entry.get("filedtype") == cid]
        ##(filtered_data)
        logging.info(filtered_data)
    for value in filtered_data:
        for values in value['values']:
            mainclient = values.get('mainclient')
            subclient = values.get('subclient')
            portal = values.get('portal')
            username = values.get('username')
            password = values.get('password')
            credstatus = values.get('credstatus')
            ordercheckstatus = values.get('ordercheckstatus')
            ats_client_id = values.get('ats_client_id')
            ats_portal_id = values.get('ats_portal_id')

            # #('Fetching details from JSON file...')
            # #('CID:', cid)
            # #('Mainclient:', mainclient)
            # #('Subclient:', subclient)
            # #('Portal:', portal)
            # #('Username:', username)
            # #('Password:', password)
            # #('Credstatus:', credstatus)
            # #('Ordercheckstatus:', ordercheckstatus)
            # #('ATS Client ID:', ats_client_id)
            # #('ATS Portal ID:', ats_portal_id)
            ctypes.windll.kernel32.SetConsoleTitleW(f"{subclient}-Redbell")
            logger_portal(subclient,portal,mainclient)
            headers={}#sending headers to prevent login denied ORSS issue
            if credstatus == 'Active':
                    if(ordercheckstatus=="TMF"):
                        ##("{}-{} ==> TMF Client => Getting TMF credentials".format(mainclient,subclient))
                        logging.info("{}-{} ==> TMF Client => Getting TMF credentials".format(mainclient,subclient))
                        conn = mysql.connector.connect(host="192.168.2.95",database="credentials",user="sam",password="working",buffered=True)
                        if conn.is_connected():
                            cursor2 = conn.cursor()
                            cursor2.execute("SELECT username,password FROM `allclients` WHERE form LIKE 'TMF' AND status='Active' AND ats_client_id="+ats_client_id)
                            tmfcred = cursor2.fetchone()
                            tmfuser=tmfcred[0]
                            tmfpass=tmfcred[1]
                            ##(tmfcred)
                            logging.info(tmfcred)
                            try:
                                tmfdata=tmfcheck(tmfuser,tmfpass)
                            except Exception as e:
                                ##('Error checking TMF ',e)
                                logging.info('Error checking TMF:{}'.format(e))
                                tmfdata=None
                        else:
                            ###('Database connection failed')
                            logging.info('Database connection failed')
                        conn.close()        
                            
                    else:tmfdata=None
                    
                    ##('Checking {} - {} ->{} account'.format(mainclient,subclient,portal))
                    logging.info('Checking {} - {} ->{} account'.format(mainclient,subclient,portal))
                    ###################################################################################
                    try:
                            if portal == 'Redbell' :
                                try:
                                            session,cookies=login_toportal(username,cid)
                                            check(session,username,password,cookies,mainclient,subclient,ats_client_id,ats_portal_id,tmfdata,ordercheckstatus,portal,cid)
                                            random_sleep_time = randint(900,1200)
                                            ##('Next account will be checked after %s seconds' % (random_sleep_time))
                                            logging.info('Next account will be checked after {} seconds:'.format(random_sleep_time))
                                            time.sleep(random_sleep_time) 
                                except Exception as ex:
                                            ##('Unable to login')
                                            ##('Exception rised ..',ex)
                                            logging.info('Unable to login')
                                            time.sleep(10)
                            ###################################################################################
                            else:
                                ##('Portal not added in order updation')
                                logging.info('Portal not added in order updation')
                                
                    except Exception as ex:
                                    ##('Exception rised ..')
                                    logging.info('Exception rised ..')
                                    time.sleep(10)
            else:
                ##('Client Inactive in DB')
                logging.info('Client Inactive in DB')
                random_sleep_time = randint(900,1200)
                ##('Next account will be checked after %s seconds' % (random_sleep_time))
                logging.info('Next account will be checked after {} seconds:'.format(random_sleep_time))
                time.sleep(random_sleep_time) 
                try:
                        if (mainclient == 'Ghulam' and subclient in ['Hanna', 'Yolanda', 'Teresa', 'Rick']) or (mainclient == 'Green Realty' and subclient in ['GR_Antony', 'GR_Deanna', 'GR_Joan', 'GR_Haley']) or (mainclient == 'Showcase Realty' and subclient in ['Lindsay Friedman', 'Riley Bevan']) or (mainclient == 'Bang' and subclient == 'Andrew'):
##                                    success_message = """Hi,\n\nThis is an auto generated mail to inform you that order updation was failed due to BAD PASSWORD!!!!! \nTime: {}\nMain Client: {}\nSubclient: {}\nPortal: {} """.format(str(datetime.datetime.now()), mainclient, subclient, portal)
##                                    mail = sender.Mail('smtp.gmail.com','notifications@bpoacceptor.com','$oft@ece2021', 465, use_ssl=True, fromaddr='notifications@bpoacceptor.com')
##                                    mail.send_message(subject='Order Updation Failed', to=('redbellorderupdfailed@ecesistech.com', 'tvmcommunicationteam@gmail.com'), body=success_message)
                            ##('Mail Sent')
                            ##("Not able to Login {}-{} Account.".format(mainclient, subclient))
                            logging.info("Mail Sent")
                            logging.info("Not able to Login {}-{} Account.".format(mainclient, subclient))
                        else:
                            ##('No need to send mail notification')
                             logging.info("No need to send mail notification")
                except Exception as ex:
                        #(ex)
# json_file_path = 'S:\PORTAL ORDER UPDATION\output_data.json'                                
#---------------------------------------------------------------------------------------#
def ExceptionMail(portname,cliname,ex):
    try: 
        mail = sender.Mail('smtp.gmail.com', 'notifications@bpoacceptor.com' , '$oft@ece2021', 465, use_ssl=True,
                                   fromaddr='notifications@bpoacceptor.com')
        
        ##('Connected to email')
        logging.info('Connected to email')
        err_message = """This is an automatic notification:
Exception in {}'s {} account.

Exception in {}
""".format(cliname,portname,ex)
        ##(err_message)
        logging.info(err_message)

        mail.send_message(subject=f'{portname} Exception!', to=('teamsoftware@ecesistech.com'), body=err_message)

        ##('Exception Mail sent')
        logging.info('Exception Mail sent')
    except Exception as ex:
        ##(ex)
        logging.info(ex)

def login_toportal(username,cid):
    try:
        cnx = mysql.connector.connect(user="order",password="acceptance",host="34.70.96.52",database="order_acceptance",autocommit=True)#set autocommit true to update DB content
        cursor = cnx.cursor(buffered=True,dictionary=True)
        #fetch DB details
        cursor.execute("""SELECT * FROM `redbell` WHERE  `userid` = '{}' LIMIT 1""".format(username))
        result = cursor.fetchone()
        if not result:
            ##(f'ERROR : userid => {username} is not in DB !!!')
            logging.info(f'ERROR : userid => {username} is not in DB !!!')
            
        else:
            ##(result)
            logging.info("result")
            result['Session_cookie']
            session,resp = checkCookie(result['Session_cookie'])
            ##(resp.text)
            logging.info("resp.text")
            if session:
                return session,result['Session_cookie']
            else:
                url = "https://us-central1-crack-mariner-131508.cloudfunctions.net/Ecesis-Authpp"
                payload = json.dumps({
                "username": username
                })
                headers = {
                'Content-Type': 'application/json'
                }
                response = requests.request("POST", url, headers=headers, data=payload)
                logging.info(response.text)
                if response.status_code==200:
                    response=json.loads(response.text)
                    logging.info("Success session fetch")
                    session,resp = checkCookie(response['cookies']['.ASPXAUTH'])
                    return session,response['cookies']
                else:
                      #("cookie fetching failed from https://us-central1-crack-mariner-131508.cloudfunctions.net/Ecesis-Authpp")
                      logging.info("cookie fetching failed from https://us-central1-crack-mariner-131508.cloudfunctions.net/Ecesis-Authpp")
                    # ExceptionMail("Redbell Order updation Script",username,f"Status Code-{response.status_code} Please Run the backup Script")
                if resp['status']=='failed' and resp['cookies']=={}:
                    ##("Login Failed")  
                    logging.info("Login Failed")  
                    url = "http://192.168.2.95/uporder/uppython.php?$cid={}".format(cid)
                    r = requests.get(url) 
                # from login import auth
                # init = auth(username,password)
                # init.login()
                # validate_auth_ = init.validateLogin()
                # if validate_auth_:
                #     #("Login Success")
                #     redbellSession = init.redbellSession
                #     cookies = requests.utils.dict_from_cookiejar(redbellSession.cookies)
                #     logging.info(cookies)
                #     cursor.execute("""UPDATE redbell SET Session_cookie = '{}' WHERE userid = '{}'""".format(cookies['.ASPXAUTH'], username))
                #     #("Session Cookie Successfully written to DB")
                #     cursor.close()
                #     cnx.close()
                #     return redbellSession,cookies
                # else:
                #     #("Login Failed")    
                #     url = "http://192.168.2.95/uporder/uppython.php?$cid={}".format(cid)
                #     r = requests.get(url)
        cursor.close()
        cnx.close()
                
    except Exception as e:
        ##('Exception in login Function---login_toportal() ',e)
        logging.info(f"Exception in login Function---login_toportal(){e}")
            

def tempHeaders():
    try:
        return {
                                'authority': 'valuationops.homegenius.com',
                                'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
                                'accept-language': 'en-US,en;q=0.5',
                                'referer': 'https://valuationops.homegenius.com/VendorPortal/AcceptOrders',
                                'sec-ch-ua': '"Chromium";v="110", "Not A(Brand";v="24", "Brave";v="110"',
                                'sec-ch-ua-mobile': '?0',
                                'sec-ch-ua-platform': '"Windows"',
                                'sec-fetch-dest': 'document',
                                'sec-fetch-mode': 'navigate',
                                'sec-fetch-site': 'same-origin',
                                'sec-fetch-user': '?1',
                                'sec-gpc': '1',
                                'upgrade-insecure-requests': '1',
                                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/1.0.0.0 Safari/537.36',
                            }
    except Exception as ex:
        ##('Exception arrises', ex)
        logging.info('Exception arrises : {}'.format(ex))


def checkCookie(session_cookie):
    session=requests.Session()
    url = "https://valuationops.homegenius.com/VendorPortalProfileV1"
    if session_cookie != '':
        data = session_cookie
        cook ='.ASPXAUTH={};'.format(data)
        ##(cook)
        logging.info(cook)
        cookie ={'.ASPXAUTH': session_cookie }
        headers = tempHeaders()
        resp = session.get(url, headers=headers ,cookies=cookie)
        ##(resp.text)
        if 'Profile Information' in resp.text:
            ##("Session Cookie Active!!!")
            session.cookies.set('.ASPXAUTH', data)									  
            logging.info("Session Cookie Active!!!")
            session.headers.update(cookie) #session cookie not getting updated after 'get' request
            return session,resp
        else:
            #("Session Cookie Not Active!!!")
            logging.info("Session Cookie Not Active!!!")
            return False,resp
    else:
        return False

def check(session,username,password,cookies,mainclient,subclient,ats_client_id,ats_portal_id,tmfdata,ordercheckstatus,portal,cid):
    
    if session:
            #('Refreshing Portal')
            inprogurl='https://valuationops.homegenius.com/VendorPortal/GetMyOrderItem'
            data = {
                    '__aweconid': 'Grid',
                    'v':'', 
                    'actionType': 'P',
                    'pageSize': '500',
                    'pageSize': '500',
                    'page': '1',
                    'tzo': '-330'
            }
            headers={
            'Host': 'valuationops.homegenius.com',
            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0',
            'Accept':'*/*',
            'Accept-Language':'en-US,en;q=0.5',
            'Accept-Encoding':'gzip, deflate',
            'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8',
            'X-Requested-With':'XMLHttpRequest',
            'Referer':'https://valuationops.homegenius.com/VendorPortal/InProgressOrder',
            'Content-Length':'188',
            'Connection':'keep-alive',
            'Pragma':'no-cache',
            'Cache-Control':'no-cache'
            }

            resp2=session.post(inprogurl,data=data,headers=headers)
            inprogorders=json.loads(resp2.content)
            ##(inprogorders)
            for x in inprogorders['dt']['it']:
                    ##(x)
                    logging.info(x)
                    orderid=x['OrderId']
                    ##('orderid',orderid)
                    logging.info('OrderId:{}'.format(orderid))
                    itemid=x['ItemId']
                    ##('ItemId:',itemid)
                    logging.info('ItemId:{}'.format(itemid))
                    ordertype=x['ProductDesc']
                    ##('OrderType:',ordertype)
                    logging.info('OrderType:{}'.format(ordertype))
                    address=x['PropAddress']
                    ##('Address:',address)
                    logging.info('Address:{}'.format(address))
                    ###########################################################################################
                    new=address.split(", ")
                    ##(new)
                    logging.info(new)
                    zipremoved=new.pop()
                    ##(zipremoved)
                    logging.info(zipremoved)
                    ##(new)####################################################removing comma b/w state and zip
                    withoutzip=",".join(new)
                    ##(withoutzip)
                    logging.info(withoutzip)
                    addfolder=withoutzip+" "+zipremoved
                    ##(addfolder)
                    logging.info(addfolder)
                    logging.info('Folder Address:{}'.format(addfolder))
                    newaddfolder=addfolder.replace(",",", ")
                    ##(newaddfolder)
                    logging.info('Final Folder Address:{}'.format(newaddfolder))
                    ###########################################################################################
                    #######################################################################
                    portaladdress = re.sub('\s+', ' ', newaddfolder).strip()
                    ##(portaladdress)
                    logging.info("Org Address: {}".format(portaladdress))
                    zadd=newaddfolder
            ###########################################################################
                    duedate=x['ProductDueDate']
                    duedate=datetime.datetime.strptime(duedate, "%m/%d/%Y %I:%M:%S %p").strftime("%m/%d/%Y %H:%M:%S")
                    ##('DueDate:',duedate)
                    logging.info('DueDate:{}'.format(duedate))
                    price=x['VendorFee']
                    ##('Fees:',price)
                    logging.info('Fees:={}'.format(price))
                    chck_revision=x['IsRejected']
                    ##('Revison order=',chck_revision)
                    logging.info('Revison order={}'.format(chck_revision))
                    if(chck_revision == 'Y'):
                            ##('Revision Order no need to update')
                            logging.info('Revision order no need to update')
                    else:
                        try:
                                resp3=session.get('https://valuationops.homegenius.com/VendorPortal/EditReport?ItemId={}&EntityType=Vendor'.format(x['ItemId']))
                    
                                condition = OA_Available(session, itemid, orderid, mainclient, address)
                                resp3=session.get('https://valuationops.homegenius.com/VendorPortal/ShowOrderInstrution?OrderId={}&ItemId={}&Type=V'.format(x['OrderId'],x['ItemId']))
                                resp3=resp3.text
                                logging.info('Instuction Response:')
                                logging.info(resp3)
                                # #('Instuction Response:')
                                # #(resp3)
                                # #('------------------')
                                resp3 = HtmlResponse(url="my HTML string", body=(resp3), encoding='utf-8')
                                instruction=resp3.xpath("//textarea//text()").extract_first()
                                instruction=html.escape(instruction)
                                instruction=re.sub('<.*?>','',instruction)
                                instruction=instruction.replace("\n","").replace("\r","").replace("#","")
                                ##('instruction',instruction)
                                logging.info('instruction: {}'.format(instruction))
                                if instruction=='':
                                    logging.info("first condition check")
                                    if (condition != None) and ("OA/Doc" in condition):
                                        condition = "OA/other documents available"
                                        logging.info("condition is {}".format(condition))
                                        instruction = "We are not able to update the instruction. Please check the portal."
                                        rentalvalue = 0
                                        updateATS(zadd,mainclient, subclient, portal, duedate, address, ordertype,ats_portal_id, ats_client_id, price, condition, rentalvalue, instruction)
                                        success_message = "ClientName : " + subclient + '\n' "Address : " + address + '\n'
                                        mail = sender.Mail('smtp.gmail.com', 'autobpo_alerts@ecesistech.com','autobpo_2021', 465, use_ssl=True, fromaddr='autobpo_alerts@ecesistech.com')
                                        
                                    else:
                                        condition="Average"
                                        instruction="We are not able to update the instruction. Please check the portal."
                                        rentalvalue=0
                                        updateATS(zadd,mainclient,subclient,portal,duedate,address,ordertype,ats_portal_id,ats_client_id,price,condition,rentalvalue,instruction)
                                if instruction and 'We are not able to update the instruction' not in instruction:
                                    logging.info("second condition check")
                                    if (condition != None) and ("OA/Doc" in condition):
                                        instruction = instruction.strip()
                                        condition, rentalvalue = updateCondition(time.strftime("%m/%d/%Y"), subclient, mainclient, ordertype, address, duedate, portal, price, instruction)
                                        logging.info("actual condition is {}".format(condition))
                                        if 'Bad' in condition:
                                              condition='Bad'
                                        else:
                                               condition = "OA/other documents available"#updated by Anusree on 06/06/2023 If OA available order is bad updated it as Bad

                                        
                                        logging.info("condition is {}".format(condition))
                                        updateATS(zadd,mainclient, subclient, portal, duedate, address, ordertype,ats_portal_id, ats_client_id, price, condition, rentalvalue, instruction)
                                        success_message = "ClientName : " + subclient + '\n' "Address : " + address + '\n'
                                        mail = sender.Mail('smtp.gmail.com', 'autobpo_alerts@ecesistech.com','autobpo_2021', 465, use_ssl=True, fromaddr='autobpo_alerts@ecesistech.com')
                                    else:
                                        instruction=instruction.strip()
                                        condition,rentalvalue=updateCondition(time.strftime("%m/%d/%Y"),subclient,mainclient,ordertype,address,duedate,portal,price,instruction)
                                        updateATS(zadd,mainclient,subclient,portal,duedate,address,ordertype,ats_portal_id,ats_client_id,price,condition,rentalvalue,instruction)
                                else:
                                    ##('instuction not available')
                                    logging.info('instuction not available')
                                    instruction="We are not able to update the instruction. Please check the portal."
                            
                        except Exception as e:
                                ##(e)
                                logging.info(e)
                                ##('Unable to Fetch condition')
                                logging.info('Unable to Fetch Condition')                            
                            
    else:
        ##('Bad Password')
        logging.info('Bad Password')
        url = "http://192.168.2.95/uporder/uppython.php?$cid={}".format(cid)
        r = requests.get(url)

def updateCondition(date,subclient,mainclient,AssetType,address,duedate,portal,price,condition):
    try:
        # #(portal)
        # #(AssetType)
        # #(condition)
        logging.info(portal)
        logging.info(AssetType)
        logging.info(condition)
        if 'Just Purchased' in condition or 'Borrower purchased' in condition:
                ##('Check this new instruction')
                logging.info('Check this new instruction')
##                mail = sender.Mail('smtp.gmail.com', 'notifications@bpoacceptor.com', '$oft@ece2021', 465, use_ssl=True, fromaddr='notifications@bpoacceptor.com')
##                success_message = "Hi Team,\n\nNeed to check the instruction is added or not for "+mainclient+' '+subclient+' '+condition
##                mail.send_message(subject='Need to check New RedBell Instruction!!!', to='teamsoftware@ecesistech.com',body=success_message)

        #creates a new entry in order updation DB with order special instructions corresponding to the order extracted from Bpofulfillment portal
        #if the order is already available in the DB with date in range of 6 days from today then only the condition field is updated(If it is empty),if the condition field is not empty then no changes are made
        prevdate1 = (datetime.datetime.now() - datetime.timedelta(1)).strftime('%m/%d/%Y')
        prevdate2 = (datetime.datetime.now() - datetime.timedelta(2)).strftime('%m/%d/%Y') 
        prevdate3 = (datetime.datetime.now() - datetime.timedelta(3)).strftime('%m/%d/%Y') 
        prevdate4 = (datetime.datetime.now() - datetime.timedelta(4)).strftime('%m/%d/%Y') 
        prevdate5 = (datetime.datetime.now() - datetime.timedelta(5)).strftime('%m/%d/%Y') 
        prevdate6 = (datetime.datetime.now() - datetime.timedelta(6)).strftime('%m/%d/%Y')
        tommorrow = (datetime.datetime.now() + datetime.timedelta(1)).strftime('%m/%d/%Y')
        date=datetime.datetime.now().strftime('%m/%d/%Y')
        conditionsave(condition,mainclient,address)
        if "rehab amount" and "purchase price" in condition or "rehab amount" and "purchase amount" in condition or "maintenance amount" and "repair/rehab budget" in condition or "rehab price" and "purchase price" in condition or "rehab price" and "purchase amount" in condition or "Rehab amount" and "Reno Scope Pamphlet which has been attached" in condition or 'Rehab budget' in condition or 'REHAB BUDGET' in condition:
                    condition='Bad'
        elif 'remaining rehab balance' in condition.lower():#added instruction on 21/07/2023 :Anusree
                        condition='Bad'
        else:
                    condcheck='the client provided the following subject information sqft:  beds:  baths:  year built: . if you find documented information that differs from the provided characteristics, please use your supported information.'
                    condcheck="".join(condcheck.split())
                    condcheck2='the client provided the following subject information sqft:  beds: .  baths:  year built: . if you find documented information that differs from the provided characteristics, please use your supported information.'
                    condcheck2="".join(condcheck2.split())     #################### bed can have floating value ################
                    condcheck3='the client provided the following subject information sqft:  beds:  baths: .  year built: . if you find documented information that differs from the provided characteristics, please use your supported information.'
                    condcheck3="".join(condcheck3.split())     #################### bath can have floating value ################
                    condcheck4='the client provided the following subject information sqft: .  beds:  baths:  year built: . if you find documented information that differs from the provided characteristics, please use your supported information.'
                    condcheck4="".join(condcheck4.split())     #################### sqft can have floating value ################
                    condcheck5='a comp for consideration when completing this order.'
                    condcheck5="".join(condcheck5.split())
                    condcheck6='the client provided the following subject information sqft:  beds:  baths:  . if you find documented information that differs from the provided characteristics, please use your supported information.'
                    condcheck6="".join(condcheck6.split())
                    condcheck7='the client provided the following subject information sqft:  beds:  baths: .  . if you find documented information that differs from the provided characteristics, please use your supported information.'
                    condcheck7="".join(condcheck7.split())#################### bath can have floating value ################
                    condcheck8='the client provided the following subject information sqft:  beds: .  baths:  . if you find documented information that differs from the provided characteristics, please use your supported information.'
                    condcheck8="".join(condcheck8.split())#################### bed can have floating value ################
                    if condition : condition = condition.lower()

                    condit=''.join([i for i in condition if not i.isdigit()])
                    condit="".join(condit.split())
                    if 'orderinstructions' in condit:
                        condit=condit.replace('orderinstructions','')
                    ##(condit)
                    try:
                        if 'totalrenovationcost' in condit:
                                     condit=condit.split('-$.')[1]
                                     ##(condit)
                                     logging.info(condit)
                        if ('Total renovation Cost' in condition or 'total renovation cost' in condition) and (condit==condcheck or condit==condcheck2 or condit==condcheck3 or condit==condcheck4):
                                    ##('Dont proceed with this order') 
                                    condition='Bad'
                        elif (condcheck in condit or condcheck2 in condit or condcheck3 in condit or condcheck4 in condit) and condcheck5 in condit:
                            condition='Bad'                                                                                                                            
                        elif condit==condcheck or condit==condcheck2 or condit==condcheck3 or condit==condcheck4 or condit==condcheck6 or condit==condcheck7 or condit==condcheck8:
                            ##('Same')
                            condition='Average'

                        else:
                                   
                            if condition=='':
                                condition='Average'
                             
                            condit=''.join([i for i in condition if not i.isdigit()])
                            condit="".join(condit.split())
                            ##(condit)
                            if condit==condcheck:
                                ##('Same')
                                condition='Average' 
                            else:
                             if condition : condition = condition.lower()
                             ##(condition)
                             cond= condition
                             GOOD = ["Because many of these renovations have been recently completed, these homes may be in superior condition, more typically attributed to C2-C3","The subject has likely been updated or renovated","The subject property is newly constructed and is scheduled for completion at closing in the next few weeks.","the client confirmed they spent the following for the rehab budget","please provide an after renovated value, arv, if the subject is close to one hundred percent complete"]         
                             AVG = ["The client is looking for fair market as is value with a list of needed repairs and an estimated cost to cure. Please do not use distressed comps unless they are the only comps available","The client is looking for fair market as is value. Please do not use distressed comps unless they are the only comps available","Please verify the rent value provided by the client","If you find this property to be located in a gated community or the property is not visible from the street, please obtain photos to confirm of what you can see, upload them to the order, and contact our office","Please ensure you are providing extremely detailed information regarding the subject's current condition. More specifically, there should be commentary provided denoting and deferred maintenance vs. significant issues which require more immediate repairs.","the client provided the following subject information  year built: 0. if you find documented information that differs from the provided characteristics, please use your supported information."]
                             FAIR = ["The client has provided a detailed rehab budget for the subject, this can be found under the 'Upload Documents' section"]
                             BAD = ['The client has provided a Budget for review, which has been uploaded to the order.','repairs were put into the home','Please add the rehab amount to the Repair details under the repair bid. The client is looking for an as-is and as-repaired value.','The client completed a rehab spend maintenance amount','Please review the UPLOADED REPAIR/REHAB BUDGET','Vacant, Pre-Rehab, will spend roughly 50000 on renovations Please add the rehab amount to the Repair details under the repair bid. The client is looking for an as-is and as-repaired value','This report is considered a retro or historical report, with an effective date supplied by the customer','Please focus on the ARV. Rehab budget attached','Please provide 1 sold comp which is Land Only for the lot ("as is") pricing','please review the Renovation Scope of Work document uploaded to the upload documents tab to review the level of efforts within the renovations','Client is looking for an As-is and As-Repaired.  Please include consideration for the clients rehab budget when providing an As-Repaired conclusion.']



                             if condition in BAD: condition = 'Bad'
                             elif any(x.lower() in condition for x in BAD): condition = 'Bad'
                             elif any(x.lower() in condition for x in FAIR): condition = 'Fair'
                             elif condition in FAIR: condition = 'Fair'
                             elif (AssetType == 'Exte' or AssetType == 'EWRA') and  "The subject has likely been updated or renovated".lower() in condition : condition  = 'Good'
                             elif any(x.lower() in condition for x in GOOD ): condition = 'Good'
                             elif condition in GOOD: condition = 'Good'
                             elif any(x.lower() in condition for x in AVG): condition = 'Average'         
                             elif condition in AVG: condition = 'Average'
                                 
                             else:
                                                condition = 'New'
                    
                        ##(condition)
                        logging.info(condition) 
                    except:
                            mail = sender.Mail('smtp.gmail.com', 'notifications@bpoacceptor.com', '$oft@ece2021', 465, use_ssl=True, fromaddr='notifications@bpoacceptor.com')
                            success_message = "Hi Team,\n\nException in "+mainclient+' '+subclient+" RedBell updation"
                            mail.send_message(subject='Exception in RedBell Order Updation!!!', to='teamsoftware@ecesistech.com',body=success_message)
                            ##('mail send')
                            logging.info('mail send')
        
        try:
                if "Rental amount" in cond:
                        rentalvalue=cond.split("Rental amount")[1].split("The client is looking for fair market as is value with a list of needed repairs and an estimated cost to cure.")[0].strip()
                elif "Client Monthly Rent" in cond:
                        rentalvalue=cond.split("Client Monthly Rent: ")[1].split(". Client is in process of signing a lease agreement and has asked us to validate the monthly rent.")[0].strip()
                elif "rent of $" in cond:
                    rentalvalue=cond.split('rent of $')[1].split('.')[0]
                    ##('Rental Value=',rentalvalue)
                    logging.info("Rental Value {}".format(rentalvalue))
                elif "rent of" in cond:
                    rentalvalue=cond.split('rent of ')[1].split('.')[0]
                    ##('Rental Value=',rentalvalue)
                    logging.info("Rental Value {}".format(rentalvalue))
                    
                else:
                        condition1=cond.upper()
                        condition1=condition1.replace("."," ")
                        condition1=condition1.replace(","," ")
                        logging.info(condition1)
                        list_of_words = condition1.split()
                        next_word = list_of_words[list_of_words.index("MONTHLY") + 1]
                        if "RENT" in next_word:
                                rentalvalue=list_of_words[list_of_words.index("RENT") + 1]
                                ##(rentalvalue)
                                if rentalvalue.isdigit():
                                        rentalvalue=int(rentalvalue)
                                else:
                                        rentalvalue=list_of_words[list_of_words.index(next_word) + 2]
                                if rentalvalue.isdigit():
                                        rentalvalue=int(rentalvalue)
                                else:
                                        rentalvalue=0
                        else:
                                rentalvalue=0
        except Exception as e:
                ##(e)
                logging.info(e)
                rentalvalue=0

        #connection to our order updation DB
        
        localconn = mysql.connector.connect(host='34.70.96.52',database='order_updation',user='order',password='acceptance',autocommit=True,buffered=True)
        if localconn.is_connected():
                ##('Connected to MySQL database...')
                logging.info('Connected to MySQL database...')
                local_cursor = localconn.cursor()
                ##("SELECT `id`,`condition` FROM `orders` WHERE (`address` LIKE '{}' AND `client`='{}' AND `subclient` = '{}' AND `portal` = '{}') AND `date` IN ('{}','{}','{}','{}','{}','{}','{}','{}')".format(address,mainclient,subclient,portal,date,tommorrow,prevdate1,prevdate1,prevdate2,prevdate3,prevdate4,prevdate5,prevdate6))
                logging.info("SELECT `id`,`condition` FROM `orders` WHERE (`address` LIKE '{}' AND `client`='{}' AND `subclient` = '{}' AND `portal` = '{}') AND `date` IN ('{}','{}','{}','{}','{}','{}','{}','{}')".format(address,mainclient,subclient,portal,date,tommorrow,prevdate1,prevdate1,prevdate2,prevdate3,prevdate4,prevdate5,prevdate6))
                local_cursor.execute("SELECT `id`,`condition` FROM `orders` WHERE (`address` LIKE '{}' AND `client`='{}' AND `subclient` = '{}' AND `portal` = '{}') AND `date` IN ('{}','{}','{}','{}','{}','{}','{}','{}')".format(address,mainclient,subclient,portal,date,tommorrow,prevdate1,prevdate1,prevdate2,prevdate3,prevdate4,prevdate5,prevdate6))
                rc = local_cursor.rowcount
                ##(rc)
                logging.info(rc)
                if rc > 0:
                        queryRes = local_cursor.fetchall()[0]
                        if rc == 1 and not queryRes[1]:                             #queryRes[1] contains condition field data
                                ##('Updating Condition to available address...')
                                logging.info('Updating Condition to available address...')
                                ##("UPDATE `orders` SET `condition` = '{}' where `id` = '{}' AND `date` IN ('{}','{}','{}')".format(condition,queryRes[0],date,tommorrow,prevdate1))
                                logging.info("UPDATE `orders` SET `condition` = '{}' where `id` = '{}' AND `date` IN ('{}','{}','{}')".format(condition,queryRes[0],date,tommorrow,prevdate1))
                                local_cursor.execute("UPDATE `orders` SET `condition` = '{}' where `id` = '{}' AND `date` IN ('{}','{}','{}')".format(condition,queryRes[0],date,tommorrow,prevdate1))
                        else :
                                ##("Duplicate Order")
                                logging.info("Duplicate Order")
                                       
                else:
                        ##('Creating new entry with condition...')
                        logging.info('Creating new entry with condition...')
                        #### CHECKING DUPLICATES#####
                        ##("SELECT `address` FROM `orders` WHERE `address` = '{}' AND `client` = '{}' AND `portal` = '{}' AND `date` IN ('{}','{}')".format(address,mainclient,portal,date,prevdate1))
                        local_cursor.execute("SELECT `address` FROM `orders` WHERE `address` = '{}' AND `client` = '{}' AND `portal` = '{}'".format(address,mainclient,portal,date,prevdate1))
                        logging.info("SELECT `address` FROM `orders` WHERE `address` = '{}' AND `client` = '{}' AND `portal` = '{}'".format(address,mainclient,portal,date,prevdate1))
                        count=len(local_cursor.fetchall())
                        if(count==0):
                                ##("INSERT INTO `orders`(`date`, `client`, `subclient`, `address`, `duedate`, `portal`, `price`, `type`, `time`, `pic`, `pastdue`,`pastdate`,`status`, `condition`) VALUES ('{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}')".format(date,mainclient,subclient,address,duedate,portal,price,AssetType, datetime.datetime.now(),"No","No","NA","Neworder",condition))
                                local_cursor.execute("INSERT INTO `orders`(`date`, `client`, `subclient`, `address`, `duedate`, `portal`, `price`, `type`, `time`, `pic`, `pastdue`,`pastdate`,`status`, `condition`) VALUES ('{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}')".format(date,mainclient,subclient,address,duedate,portal,price,AssetType, datetime.datetime.now(),"No","No","NA","Neworder",condition))
                                logging.info("INSERT INTO `orders`(`date`, `client`, `subclient`, `address`, `duedate`, `portal`, `price`, `type`, `time`, `pic`, `pastdue`,`pastdate`,`status`, `condition`) VALUES ('{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}')".format(date,mainclient,subclient,address,duedate,portal,price,AssetType, datetime.datetime.now(),"No","No","NA","Neworder",condition))
                                ##("New order inserted")
                                logging.info("New order inserted")
                        else:
                                ##("Order already inserted into DB-----Duplicate")
                                logging.info("Order already inserted into DB-----Duplicate")
                local_cursor.close()
                localconn.close()

        else:
                ##('DB Connection Failed')
                logging.info('DB Connection Failed')
        localconn.close()

        return condition,rentalvalue
    

    except Exception as ex:
                ##('------->',ex)
                logging.info(ex)
                

def updateATS(zadd,mainclient,subclient,portal,due,adrs,typ,portId,clientId,price,condition,rentalvalue,instruction):
        client=mainclient+'-'+subclient
        ##("Order Type",typ)
        logging.info("Order Type - {}".format(typ))
        logging.info("Due Date - {}".format(due))
        #convert duedate and time to IST ==> Provide duedate - <due> in MM/DD/YYYY H:M:S format
        try:
            due = validate_dateTime(due)
            ISTdue = datetime.datetime.strptime(due, "%m/%d/%Y %H:%M:%S") + datetime.timedelta(hours=9,minutes=30)#parse datetime string to datetime object and add required time to it
            ISTdue =datetime.datetime.strftime(ISTdue, "%m/%d/%Y %H:%M:%S")#format datetime object to string
            ##('IST Due Date',ISTdue)
            logging.info('IST Due Date:{}'.format(ISTdue))
        except Exception as e:
            ##print(f'Failed to convert duedate ==> {due} to IST')
            logging.info('Failed to convert duedate to IST')
        #=====================================================================================

            
        if not price: price="0"


        #=================================================fetching ordewr type from 52  db
        '''conn = mysql.connector.connect(host="34.70.96.52",database="order_updation",user="order",password="acceptance",buffered=True)
        cursor = conn.cursor()
        cursor.execute("""SELECT typeid, type FROM tfstypeid WHERE FIND_IN_SET('{}', type)""".format(typ))
        #("""SELECT typeid, type FROM tfstypeid WHERE FIND_IN_SET('{}', type)""".format(typ))
        if(cursor.rowcount>0):
            typId = cursor.fetchone()[0]
            #(typId)
            #("Order Type --{}-- Found".format(typ))
        else:
            #("Order Type --{}--  Not Found".format(typ))
            logging.info("Order Type --{}--  Not Found".format(typ))
            #("Using Default Type -- 7")
            logging.info("Using Default Type -- 7")
            typId = None  
        cursor.close()
        conn.close()'''

        ordertype_json = 'S:\Portal Order Updation App script\order_type.json'
        with open(ordertype_json, 'r') as json_file:
            data_type = json.load(json_file)
            for entry in data_type:
                    filedtype_values = entry['filedtype']
                    type_value =entry['values']
                    terms = filedtype_values.split(',')
                    for value in terms : 
                        if value == typ:
                            ##("ordertype match found from json")
                            logging.info("ordertype match found from json")
                            for values in type_value:    
                                typId=values.get('typeid') 
                                if typId is not None:
                                    ##('typId:', typId)
                                    logging.info('typId:'.format( typId))
                                    break
                                else:
                                    ##("typid not found") 
                                    logging.info("typid not found") 
                            break                    
                        else:
                            ##("Order Type --{}--  Not Found".format(typ))
                            logging.info("Order Type --{}--  Not Found".format(typ))
                            ##("Using Default Type -- 7")
                            logging.info("Using Default Type -- 7")
                            typId = None  
                    if typId == None:
                        ##("Check next set")
                          logging.info("Check next set")
                    else:
                        break
            
            ##(typId)
                    
        
                
        adrs = removeHTML.sub('', adrs)
        
        adrs = re.sub('\s+', ' ', adrs).strip()
        address_copy = adrs   
        adrs = adrs.replace(",", " ").replace("  ", " ").replace(" ,", " ").replace("  ", " ").replace(" ,", " ").replace(", ", " ")
        adrs = re.sub('\s+', ' ', adrs).strip()
        
        trimsubj="" #trimsubj --> remove 4 digit extension to zipcode from address if present,this will be passed as subchk
        n = adrs.split(" ")
        r = n[-1].split("-")
        r[0] = str(r[0]).replace(",", "")
        n[-1] = r[0]
        for i in range(0,len(n)): trimsubj = trimsubj + ' '+ n[i]
        
        trimsubj = trimsubj.strip()

        zipcode = n[-1].split("-")
        zipcode = str(zipcode[0]).replace(",", "").strip()

        if len(zipcode) > 5 or len(zipcode)< 3 or not zipcode.isdigit(): zipcode=None
        else: zipcode = zipcode.zfill(5) #add leading zeroes to make zipcode 5 digit,incase of 3 or 4 digit zipcodes

        addressTrm = adrs.replace("~", "   ")
        subchk = trimsubj.replace("~", "   ")

        price = non_decimal.sub('', str(price)).strip()
        ##("Order Price",price)
        logging.info('Order Price:{}'.format(price))

        ############checking ELIZABETH NY OR NJ#############
        ##("CHECKING WHETHER ORDER ACCEPTED FOR MATTHEW-ELIZABETH NY OR MATTHEW-ELIZABETH NJ............")
        logging.info("CHECKING WHETHER ORDER ACCEPTED FOR MATTHEW-ELIZABETH NY OR MATTHEW-ELIZABETH NJ............")
        ##(clientId)
        logging.info(clientId)
        if clientId=="10742" or clientId=="10743":
                state=adrs.split()[-2]
                ##('STATE',state)
                logging.info(state)
                ##("CHECKING STATE (NY or NJ)")
                logging.info("CHECKING STATE (NY or NJ)")
                if state=="NY":
                    clientId=10742
                elif state=="NJ":
                    clientId=10743
                else:
                    #("CHECK THE ORDER...........")
                    logging.info("CHECK THE ORDER...........")
        ###################################################################################
        if clientId=='97' and (typId=='10' or typId=='12' or typId=='13' or typId=='14' or typId=='17' or typId=='18' or typId=='9' or typId=='4'):
         ##('Inspection order of Vernon')
         logging.info('Inspection order of Vernon')
         
        elif typId and zipcode and clientId and portId:
                ##('Updating Order Details to TFS..........')
                logging.info('Updating Order Details to TFS..........')
                session1 = requests.Session()
                inputData = "{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~".format(orderid,due,addressTrm,typId,portId,photo,clientId,price,zipcode,auto,subchk,address_copy,
                                                                             ISTdue,condition,rentalvalue)
                instruction="{}".format(instruction)
                splinstruction="We are not able to update the instruction. Please check the portal."
                ##(inputData)
                logging.info('inputData : {}'.format(inputData))
                payload={
                     "clientId":clientId,
                     "procData":inputData,
                     "instructions":instruction,
                     "splInstructions":splinstruction
                    }
                ##(payload)
                # url="http://13.200.17.36/ecesisapp/ats/Home/AddOrder"
                url="https://bpotrackers.com/ecesisapp/ats/Home/AddOrder"
                try:
                        response = session1.post(url,data=payload)
                except:
                        session1 = requests.Session()
                        response = session1.post(url,data=payload)
                ##(response.text)
                resx=response.text
                logging.info(resx)
                if 'Success' not in resx:
                        ##('Updation Failed..........')
                        logging.info('Updation Failed..........')
                else:
                        ##('Successfully updated the order')
                        logging.info('Successfully updated the order')
                        ######################################################################
                        today=DT.now
                        year1=today().strftime('%Y')
                        month=today().strftime('%B')
                        currentdate=today().strftime('%m-%d-%Y')
                        ##(currentdate)       
                        logging.info("Currentdate {}".format(currentdate))
                        def foldercreation():        
                            folder="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                            os.makedirs(folder)
                            ##("folder created")
                            logging.info('folder created')
                        if zadd.__contains__('#') or zadd.__contains__('Union') or zadd.__contains__('UNION') or zadd.__contains__('APT') or zadd.__contains__('apt'):
                            foldercreation()
                        else:
                            trial=zadd.replace(",","")
                            ##("replaced trial:",trial)
                            trial=trial.split(" ")           
                            zip=trial[-1]      
                            trial=trial[:2]
                            x=" ".join(trial)
                            trial=x.lower()
                            ##("folderzip:",zip)
                            logging.info(zip)
                            ##("foldertrial:",trial) 
                            logging.info(trial)              
                            path="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient
                            ##(os.listdir(path))
                            logging.info(os.listdir(path))
                            addfolders=os.listdir(path)
                            for i in addfolders:
                                oldaddress=i
                                i=i.replace(",","")
                                i=i.split(" ")
                                zippro=i[-1]      
                                typeofzip=zippro.isdigit()      
                                list=i[:2]
                                x=" ".join(list)
                                listadd=x.lower()
                                #("listadd=",listadd)
                                #("zippro:",zippro)
                                #("i=",i)
                                if trial==listadd and zip==zippro:
                                    old="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+oldaddress
                                    new="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                                    os.rename(old,new)
                                    ##("Folder renamed")
                                    logging.info('folder renamed')
                                    break
                                elif trial==listadd and typeofzip==False:
                                    old="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+oldaddress
                                    new="Z:\\BPO\\"+year1+"//"+month+"//"+currentdate+"//"+mainclient+"//"+zadd
                                    os.rename(old,new)
                                    ##("Folder renamed")
                                    logging.info('folder renamed')
                                    break  
                                else:
                                    ##("match not found moving to next address")  
                                    logging.info("match not found moving to next address")                
                 

                            ##(addfolders.__contains__(zadd))
                            try:
                                if addfolders.__contains__(zadd)==False:
                                    foldercreation()
                                else:
                                    ##("no need to create folder")
                                    logging.info("no need to create folder")     
                            except Exception as e:
                                ##(e)
                                  logging.info(e)
            #####################################################################
        else:
                if not clientId:
                    ##('Client Not Active or Unable to Map Client!!')
                    logging.info('Client Not Active or Unable to Map Client!!')
                    if client!="Sharyn" and client!="Sharyn Sharyn" and client!="Sharyn Jenny" and client!="Sharyn Matt" and client!="Matthew Daw":
                        maipping_mailsend('clientname',address_copy,portal,client,typ,'teamsoftware@ecesistech.com','Mapping Failed.... Clientname!')
                if not zipcode:
                    ##('Invalid Zipcode!!')
                    logging.info('Invalid Zipcode!!')
                if not typId:
                    ##('Unable to map order Type -- {}'.format(typ))
                    logging.info('Unable to map order Type -- {}'.format(typ))
                    maipping_mailsend('ordertype',address_copy,portal,client,typ,'mapping@ecesistech.com','Mapping Failed.... Order Type!')
                if not portId:
                    ##('Unable to map portakl!!')
                    logging.info('Unable to map portakl!!')
                        

def validate_dateTime(date_text): #function checks if due time is present in datetime string and appends 17:00:00 if no time is present #TFS default Time 5 PM
    try:
        datetime.datetime.strptime(date_text, "%m/%d/%Y %H:%M:%S")
        return date_text
    except ValueError:
        ##("Incorrect date format, should be MM/DD/YYYY H:M:S")
        logging.info("Incorrect date format, should be MM/DD/YYYY H:M:S")
        ##("Appending time to date")
        logging.info("Appending time to date")
        date_text = f'{date_text} 17:00:00'  
        return date_text

def tmfcheck(tmfuser,tmfpass):
    session = requests.session()
    tmfadd=[]
    url = "https://www.trackmyforeclosures.com/members/login/process/"
    data = {
            'username':tmfuser,
            'password':tmfpass,
            'submit':'Login'
            }
    response = session.post(url, data=data)
    if("Invalid Login or Password" not in response.text):
        ##("Sucess Login to TMF")
        logging.info("Sucess Login to TMF")
        order=session.get("https://www.trackmyforeclosures.com/members/dashboard/getActive/?sEcho=1&iDisplayStart=0&iDisplayLength=-1")
        order=json.loads(order.text)
        for x in order["aaData"]:
            tmfadd.append(' '.join(x[3].split(",")[0].strip().split(" ")[:-2]))
        ##(tmfadd)
        logging.info(tmfadd)
            
        return tmfadd
    else:
          logging.info("Login Faild to TMF")

def conditionsave(condition,mainclient,address):
        ##(condition)
        year=datetime.datetime.now().strftime('%Y')
        month=datetime.datetime.now().strftime('%B')
        date=datetime.datetime.now().strftime('%m-%d-%Y')
        path_to_file='Z:\\BPO\\{}\\{}\\{}\\{}\\Condition'.format(year,month,date,mainclient)
        logging.info(path_to_file)
        if not os.path.exists(path_to_file):
                os.makedirs(path_to_file,mode = 0o666)
        logging.info(path_to_file)

        try:
                with open(path_to_file+'\condition-{}.txt'.format(address), "w") as f:
                        logging.info(condition)
                        f.writelines(condition)
                f.close()
        except Exception as e:
                ##(e)
                logging.info(e)

def condition_mail(address):
        try:
##                mail = sender.Mail('smtp.gmail.com', 'notifications@bpoacceptor.com' , '$oft@ece2021', 465, use_ssl=True,fromaddr='notifications@bpoacceptor.com')
##                #('Connected to email')
##                logging.info('Connected to email')
##                cond_fetch_message = """This is an automatic notification:
##                                Unable to fetch condition for the order {}.""".format(address)
##                #(cond_fetch_message)
##                logging.info(cond_fetch_message)
##                mail.send_message(subject='Condition Fetching Failed!!!', to=('teamsoftware@ecesistech.com'), body=cond_fetch_message)
                ##('Condition Fetching Failed!!!')
                logging.info('Condition Fetching Failed!!!')
        except Exception as e:
                ##(e)
                logging.info(e)
                ##('Unable to send mail')

json_file_path = 'S:\Portal Order Updation App script\output_data.json'
def main():
    
    while True:
        Query_JSON(json_file_path)

if __name__ == '__main__':main()
